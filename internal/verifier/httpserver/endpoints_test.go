package httpserver

import (
	"crypto/ecdsa"
	"crypto/elliptic"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"math/big"
	"net/url"
	"strings"
	"testing"
	"vc/pkg/openid4vp"
)

func Test_callback_with_unencrypted_body_dev_support_util(t *testing.T) {

	//encodedBody := ""
	encodedBody := ""
	//TODO: denna body är PID+EHIC från www: encodedBody := ""

	padded := encodedBody + strings.Repeat("=", (4-len(encodedBody)%4)%4)
	decodedBytes, err := base64.StdEncoding.DecodeString(padded)
	if err != nil {
		panic(err)
	}
	fmt.Println("### DECODED BYTES:", string(decodedBytes))

	values, err := url.ParseQuery(string(decodedBytes))
	if err != nil {
		panic(err)
	}
	fmt.Println("### VALUES FROM PARSED QUERY:", values)
}

func Test_callback_with_encrypted_body_dev_support_util(t *testing.T) {

	body := ""
	dStr := "T2TNTXgC8iJ94qi1o5dtqie1_CMMw9iCdPumcXioEx0"
	xStr := "Rs2N56uYDcdPYRUzrCiTbVJ_mnF9UTRiqW8zMnsOHT0"
	yStr := "xEpxWgatdtSbt_8_t5RngJmMjqFX8OxSWX6rhCIF6a8"

	// "application/x-www-form-urlencoded"
	decoded, err := base64.StdEncoding.DecodeString(body)
	if err != nil {
		panic(err)
	}
	fmt.Println("##### Base64-decoded body:")
	fmt.Println(string(decoded))

	values, err := url.ParseQuery(string(decoded))
	if err != nil {
		panic(err)
	}

	response := values.Get("response")
	fmt.Println("##### Decoded response (JWE):")
	fmt.Println(response)

	privateKey := buildP256PrivateKeyFrom(dStr, xStr, yStr)
	decryptedPayload, err := openid4vp.DecryptJWE(response, privateKey)
	if err != nil {
		panic(err)
	}
	fmt.Println("##### Decrypted payload:")
	fmt.Println(string(decryptedPayload))

	ar := &openid4vp.AuthorizationResponse{}
	err = json.Unmarshal(decryptedPayload, ar)
	if err != nil {
		panic(err)
	}

	fmt.Printf("##### A_R: %v", ar)
}

func buildP256PrivateKeyFrom(dStr, xStr, yStr string) *ecdsa.PrivateKey {
	dBytes, err := base64.RawURLEncoding.DecodeString(dStr)
	if err != nil {
		panic(err)
	}
	xBytes, err := base64.RawURLEncoding.DecodeString(xStr)
	if err != nil {
		panic(err)
	}
	yBytes, err := base64.RawURLEncoding.DecodeString(yStr)
	if err != nil {
		panic(err)
	}

	d := new(big.Int).SetBytes(dBytes)
	x := new(big.Int).SetBytes(xBytes)
	y := new(big.Int).SetBytes(yBytes)

	privateKey := &ecdsa.PrivateKey{
		PublicKey: ecdsa.PublicKey{
			Curve: elliptic.P256(),
			X:     x,
			Y:     y,
		},
		D: d,
	}
	return privateKey
}
