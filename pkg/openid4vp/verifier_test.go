package openid4vp

//
//import (
//	"crypto/ecdsa"
//	"crypto/ed25519"
//	"crypto/elliptic"
//	"crypto/rand"
//	"crypto/rsa"
//	"encoding/base64"
//	"fmt"
//	"github.com/ethereum/go-ethereum/crypto" // For secp256k1 (ES256K)
//	"github.com/go-jose/go-jose/v4"
//	"github.com/golang-jwt/jwt/v5"
//	"strings"
//	"testing"
//	"time"
//)
//
//const arFromAnnasCLIWallet = "eyJhbGciOiJFUzI1NiIsImtpZCI6ImJWOWpXbXBtVTI5MldXdGhlbXczU2xGU2FFcFhObmhSWldaamNGUllXVXBtVG1wSE5VODBXRWRYT0EifQ.eyJ2cF90b2tlbiI6ImV5SmhiR2NpT2lKRlV6STFOaUlzSW10cFpDSTZJbUpXT1dwWGJYQnRWVEk1TWxkWGRHaGxiWGN6VTJ4R1UyRkZjRmhPYm1oU1dsZGFhbU5HVWxsWFZYQnRWRzF3U0U1Vk9EQlhSV1JZVDBFaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDNkaGJHeGxkQzVsZUdGdGNHeGxMbTl5WnlJc0ltRjFaQ0k2SW1oMGRIQnpPaTh2ZG1OMlpYSnBabWxsY2k1emRXNWxkQzV6WlNJc0ltbGhkQ0k2TVRjME16QTNPREk0T0N3aWJtSm1Jam94TnpRek1EYzRNamc0TENKbGVIQWlPakUzTkRNMk9ETXdPRGdzSW1OdVppSTZleUpxZDJzaU9uc2lhM1I1SWpvaVJVTWlMQ0oxYzJVaU9pSnphV2NpTENKcmFXUWlPaUppVmpscVYyMXdiVlV5T1RKWFYzUm9aVzEzTTFOc1JsTmhSWEJZVG01b1VscFhXbXBqUmxKWlYxVndiVlJ0Y0VoT1ZUZ3dWMFZrV0U5Qklpd2lZM0oySWpvaVVDMHlOVFlpTENKNElqb2lTbmhSVUVReFR6TTBTVmhVVlVwT01ucHVSbVJpTXkwMWNHTTJkVVJNZWxWeVNqUnFWbUV4WWxCTWN5SXNJbmtpT2lJeVYxcHlSWFZYYW14d01tUkNZMVpQYVdRd1MyTlZTakZWTVVaWU5UUkRVbTFHZGpOTlUwTnhaRTAwSW4xOUxDSjJaWEpwWm1saFlteGxRM0psWkdWdWRHbGhiQ0k2ZXlKemRXSnFaV04wSWpwN0ltUmhkR1ZmYjJaZlltbHlkR2dpT2lJeE9UZzRMVEV5TFRFeElpd2labUZ0YVd4NVgyNWhiV1VpT2lKVWFHVnliMjRpTENKbWIzSmxibUZ0WlNJNklrTm9ZWEpzYVhwbEluMHNJbk52WTJsaGJGOXpaV04xY21sMGVWOXdhVzRpT2lJek5EVTJOemc1TUNJc0luQmxjbWx2WkY5bGJuUnBkR3hsYldWdWRDSTZleUpsYm1ScGJtZGZaR0YwWlNJNklqSXdNall0TURRdE1USWlMQ0p6ZEdGeWRHbHVaMTlrWVhSbElqb2lNakF5TXkwd015MHhNeUo5TENKa2IyTjFiV1Z1ZEY5cFpDSTZJalkzT0Rrd01USXpORFUyTnpnNU1ERXlNelExSWl3aVkyOXRjR1YwWlc1MFgybHVjM1JwZEhWMGFXOXVJanA3SW1sdWMzUnBkSFYwYVc5dVgyTnZkVzUwY25raU9pSkdVaUlzSW1sdWMzUnBkSFYwYVc5dVgybGtJam9pUTB4RlNWTlRJaXdpYVc1emRHbDBkWFJwYjI1ZmJtRnRaU0k2SWtkeWIzVndaU0JEWVdsemMyVWdaR1Z6SUVSY2RUQXdaVGx3WEhVd01HWTBkSE1nWVhOemFYTjBaV1FnWW5rZ2RHaGxJRU5sYm5SeVpTQnZaaUJGZFhKdmNHVmhiaUJoYm1RZ1NXNTBaWEp1WVhScGIyNWhiQ0JNYVdGcGMyOXVjeUJtYjNJZ1UyOWphV0ZzSUZObFkzVnlhWFI1SW4wc0ltTnVaaUk2ZXlKcWQyc2lPbnNpYTJsa0lqb2lWVlZHUzFkRWJFOVlNVXB2WXpGRmVWcHRSbnBWV0doSlZVYzVXVlJJY0ZsVGJXUlZVekEwTWs5RVNYUlBSR2N6WkZkU2FrNUdUbEpPUVNJc0ltTnlkaUk2SWxBdE1qVTJJaXdpYTNSNUlqb2lSVU1pTENKNElqb2lOa3gzYUVORmJVdGxkbW80Y1VJeFJsTk5NVGM1WlhkTFdWaEJiWGx6UlRORlpYSTRTbEY1WjNGelJTSXNJbmtpT2lKUlFWQklSMWRFTjFkWlIycHFiRUo1Ym5kaVZVRXdZVEJWWjB4ZmNtdElWWFpzZDBoVU1GVTRhbmR2SW4xOUxDSmxlSEFpT2pFM056TXlNemsyTkRRc0ltbHpjeUk2SW1oMGRIQnpPaTh2YzJGMGIzTmhMV1JsZGkweExuTjFibVYwTG5ObElpd2libUptSWpveE56UXhOekF6TmpRMExDSjJZM1FpT2lKRlNFbERRM0psWkdWdWRHbGhiQ0o5ZlEuaUtZTEhjaUI0QmZ1aU5zUWJSTWNoM2pBdGI5bXhBSlRWMGZvV0ktM19RcDhCdUVlUEF4Z25HR2t4R09tWDEySWFMck9mdG1HWjA3UlR5eWtvc1YtT0EiLCJwcmVzZW50YXRpb25fc3VibWlzc2lvbiI6eyJpZCI6IjEyMyIsImRlZmluaXRpb25faWQiOiJWQ0V1cm9wZWFuSGVhbHRoSW5zdXJhbmNlQ2FyZCIsImRlc2NyaXB0b3JfbWFwIjpbeyJpZCI6IlZDRXVyb3BlYW5IZWFsdGhJbnN1cmFuY2VDYXJkIiwicGF0aCI6IiQifV19LCJzdGF0ZSI6ImJjMWZlYzczLWVlMjItNDA1ZC05YzBlLTA4Y2UyOWRiNzc5NiJ9.ct4S-_l7-uRmYADWTtAtX8HaN383vDWMp6QzTNh2GmiEmpPyvMT8wqktisIozbrG-H7oTyj2MHL6jiiOW-ychA"
//
//const pid_sd_vc_jwt_with_selective_disclosures_and_holder_binding = "eyJ0eXAiOiJKV1QiLCJ2Y3RtIjpbImV5SjJZM1FpT2lKMWNtNDZZM0psWkdWdWRHbGhiRHAyYVdRaUxDSnVZVzFsSWpvaVVFbEVJaXdpWkdWelkzSnBjSFJwYjI0aU9pSlVhR2x6SUdseklHRWdVRWxFSUdSdlkzVnRaVzUwSUdsemMzVmxaQ0JpZVNCMGFHVWdkMlZzYkNCcmJtOTNiaUJXU1VRZ1NYTnpkV1Z5SWl3aVpHbHpjR3hoZVNJNlczc2libUZ0WlNJNklsQkpSQ0lzSW5KbGJtUmxjbWx1WnlJNmV5SnphVzF3YkdVaU9uc2liRzluYnlJNmV5SjFjbWtpT2lKb2RIUndjem92TDNsdmRYSmxkV1JwTG1Sak5HVjFMbVYxTDJsdFlXZGxjeTkyYVdSRFlYSmtMbkJ1WnlJc0luVnlhU05wYm5SbFozSnBkSGtpT2lKemFHRXlOVFl0WVdOa1lUTTBNRFJqTW1ObU5EWmtZVEU1TW1ObU1qUTFZMk5qTm1JNU1XVmtZMlU0T0RZNU1USXlabUUxWVRZMk16WXlPRFJtTVdFMk1HWm1ZMlE0TmlJc0ltRnNkRjkwWlhoMElqb2lWa2xFSUVOaGNtUWlmU3dpWW1GamEyZHliM1Z1WkY5amIyeHZjaUk2SWlNeE1qRXdOMk1pTENKMFpYaDBYMk52Ykc5eUlqb2lJMFpHUmtaR1JpSjlMQ0p6ZG1kZmRHVnRjR3hoZEdWeklqcGJleUoxY21raU9pSm9kSFJ3Y3pvdkwzbHZkWEpsZFdScExtUmpOR1YxTG1WMUwybHRZV2RsY3k5cFpGUmxiWEJzWVhSbExuTjJaeUo5WFgxOVhTd2lZMnhoYVcxeklqcGJleUp3WVhSb0lqcGJJbWRwZG1WdVgyNWhiV1VpWFN3aVpHbHpjR3hoZVNJNmV5SmxiaTFWVXlJNmV5SnNZV0psYkNJNklrZHBkbVZ1SUU1aGJXVWlMQ0prWlhOamNtbHdkR2x2YmlJNklsUm9aU0JuYVhabGJpQnVZVzFsSUc5bUlIUm9aU0JXU1VRZ2FHOXNaR1Z5SW4xOUxDSjJaWEpwWm1sallYUnBiMjRpT2lKMlpYSnBabWxsWkNJc0luTmtJam9pWVd4c2IzZGxaQ0lzSW5OMloxOXBaQ0k2SW1kcGRtVnVYMjVoYldVaWZTeDdJbkJoZEdnaU9sc2labUZ0YVd4NVgyNWhiV1VpWFN3aVpHbHpjR3hoZVNJNmV5SmxiaTFWVXlJNmV5SnNZV0psYkNJNklrWmhiV2xzZVNCT1lXMWxJaXdpWkdWelkzSnBjSFJwYjI0aU9pSlVhR1VnWm1GdGFXeDVJRzVoYldVZ2IyWWdkR2hsSUZaSlJDQm9iMnhrWlhJaWZYMHNJblpsY21sbWFXTmhkR2x2YmlJNkluWmxjbWxtYVdWa0lpd2ljMlFpT2lKaGJHeHZkMlZrSWl3aWMzWm5YMmxrSWpvaVptRnRhV3g1WDI1aGJXVWlmU3g3SW5CaGRHZ2lPbHNpWW1seWRHaGZaR0YwWlNKZExDSmthWE53YkdGNUlqcDdJbVZ1TFZWVElqcDdJbXhoWW1Wc0lqb2lRbWx5ZEdnZ1JHRjBaU0lzSW1SbGMyTnlhWEIwYVc5dUlqb2lWR2hsSUdKcGNuUm9JR1JoZEdVZ2IyWWdkR2hsSUZaSlJDQm9iMnhrWlhJaWZYMHNJblpsY21sbWFXTmhkR2x2YmlJNkluWmxjbWxtYVdWa0lpd2ljMlFpT2lKaGJHeHZkMlZrSWl3aWMzWm5YMmxrSWpvaVltbHlkR2hmWkdGMFpTSjlMSHNpY0dGMGFDSTZXeUpwYzNOMWFXNW5YMkYxZEdodmNtbDBlU0pkTENKa2FYTndiR0Y1SWpwN0ltVnVMVlZUSWpwN0lteGhZbVZzSWpvaVNYTnpkV2x1WnlCQmRYUm9iM0pwZEhraUxDSmtaWE5qY21sd2RHbHZiaUk2SWxSb1pTQmpiM1Z1ZEhKNUlHTnZaR1VnYjJZZ2RHaGxJR0YxZEdodmNtbDBlU0IwYUdGMElHbHpjM1ZsWkNCMGFHbHpJR055WldSbGJuUnBZV3dpZlgwc0luWmxjbWxtYVdOaGRHbHZiaUk2SW1GMWRHaHZjbWwwWVhScGRtVWlMQ0p6WkNJNkltRnNiRzkzWldRaUxDSnpkbWRmYVdRaU9pSnBjM04xYVc1blgyRjFkR2h2Y21sMGVTSjlMSHNpY0dGMGFDSTZXeUpwYzNOMVlXNWpaVjlrWVhSbElsMHNJbVJwYzNCc1lYa2lPbnNpWlc0dFZWTWlPbnNpYkdGaVpXd2lPaUpKYzNOMVlXNWpaU0JFWVhSbElpd2laR1Z6WTNKcGNIUnBiMjRpT2lKVWFHVWdaR0YwWlNCaGJtUWdkR2x0WlNCcGMzTjFaV1FnZEdocGN5QmpjbVZrWlc1MGFXRnNJbjE5TENKMlpYSnBabWxqWVhScGIyNGlPaUpoZFhSb2IzSnBkR0YwYVhabElpd2ljMlFpT2lKaGJHeHZkMlZrSWl3aWMzWm5YMmxrSWpvaWFYTnpkV0Z1WTJWZlpHRjBaU0o5TEhzaWNHRjBhQ0k2V3lKbGVIQnBjbmxmWkdGMFpTSmRMQ0prYVhOd2JHRjVJanA3SW1WdUxWVlRJanA3SW14aFltVnNJam9pUlhod2FYSjVJRVJoZEdVaUxDSmtaWE5qY21sd2RHbHZiaUk2SWxSb1pTQmtZWFJsSUdGdVpDQjBhVzFsSUdWNGNHbHlaV1FnZEdocGN5QmpjbVZrWlc1MGFXRnNJbjE5TENKMlpYSnBabWxqWVhScGIyNGlPaUpoZFhSb2IzSnBkR0YwYVhabElpd2ljMlFpT2lKaGJHeHZkMlZrSWl3aWMzWm5YMmxrSWpvaVpYaHdhWEo1WDJSaGRHVWlmVjBzSW5OamFHVnRZU0k2ZXlJa2MyTm9aVzFoSWpvaWFIUjBjRG92TDJwemIyNHRjMk5vWlcxaExtOXlaeTlrY21GbWRDMHdOeTl6WTJobGJXRWpJaXdpZEhsd1pTSTZJbTlpYW1WamRDSXNJbkJ5YjNCbGNuUnBaWE1pT25zaVoybDJaVzVmYm1GdFpTSTZleUowZVhCbElqb2ljM1J5YVc1bkluMHNJbVpoYldsc2VWOXVZVzFsSWpwN0luUjVjR1VpT2lKemRISnBibWNpZlN3aVltbHlkR2hmWkdGMFpTSTZleUowZVhCbElqb2ljM1J5YVc1bkluMHNJbWx6YzNWcGJtZGZZWFYwYUc5eWFYUjVJanA3SW5SNWNHVWlPaUp6ZEhKcGJtY2lmU3dpYVhOemRXRnVZMlZmWkdGMFpTSTZleUowZVhCbElqb2ljM1J5YVc1bkluMHNJbVY0Y0dseWVWOWtZWFJsSWpwN0luUjVjR1VpT2lKemRISnBibWNpZlgwc0luSmxjWFZwY21Wa0lqcGJYU3dpWVdSa2FYUnBiMjVoYkZCeWIzQmxjblJwWlhNaU9uUnlkV1Y5ZlEiXSwieDVjIjpbIk1JSUIzRENDQVlFQ0ZIQkRXcGtMaTY0ZjVackYweHV5dGo1UElyYnFNQW9HQ0NxR1NNNDlCQU1DTUhBeEN6QUpCZ05WQkFZVEFrZFNNUTh3RFFZRFZRUUlEQVpCZEdobGJuTXhFREFPQmdOVkJBY01CMGxzYkdsemFXRXhFVEFQQmdOVkJBb01DSGQzVjJGc2JHVjBNUkV3RHdZRFZRUUxEQWhKWkdWdWRHbDBlVEVZTUJZR0ExVUVBd3dQZDNkM1lXeHNaWFF0YVhOemRXVnlNQjRYRFRJME1Ea3lOakE0TVRReE1sb1hEVE0wTURreU5EQTRNVFF4TWxvd2NERUxNQWtHQTFVRUJoTUNSMUl4RHpBTkJnTlZCQWdNQmtGMGFHVnVjekVRTUE0R0ExVUVCd3dIU1d4c2FYTnBZVEVSTUE4R0ExVUVDZ3dJZDNkWFlXeHNaWFF4RVRBUEJnTlZCQXNNQ0Vsa1pXNTBhWFI1TVJnd0ZnWURWUVFEREE5M2QzZGhiR3hsZEMxcGMzTjFaWEl3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVF0WTlrVVFGZkRmNmlvY0ZFNHJSdnkzR015WXlwcW1YM1pqbXdVZVhKeTBra2dSVDczQzgrV1BrV05nL3lkSkhDRURETzVYdVJhSWFPSGM5RHBMcE5TTUFvR0NDcUdTTTQ5QkFNQ0Ewa0FNRVlDSVFEencyN25CcjdFOE42R3FjODN2LzYrOWl6aS9ORVhCS2xvandMSkFlU2xzQUloQU8ySmRqUEV6M2JEMHN0b1dFZzdSRHRyQW04ZHNncnlDeTFXNUJER0NWZE4iXSwiYWxnIjoiRVMyNTYifQ.eyJjbmYiOnsiandrIjp7ImNydiI6IlAtMjU2IiwiZXh0Ijp0cnVlLCJrZXlfb3BzIjpbInZlcmlmeSJdLCJrdHkiOiJFQyIsIngiOiJvdy0tc1EwTERHYWxEMEJtZ2VmeWtnOTBJT2FKX1lHZ0RyZTNLMUtwNkY4IiwieSI6Ikp1SjBOX3ZNQ3NrNkdsTVd1SEpVMXlsNVRDQkp0dnpNWjlEMjU3UkJmUFUifX0sInZjdCI6InVybjpjcmVkZW50aWFsOnZpZCIsImp0aSI6InVybjp2aWQ6YjBmNzE3MzgtYzI0Zi00OWVjLThkZTMtOWJhN2YyN2FlYWMyIiwiaXNzdWFuY2VfZGF0ZSI6IjIwMjUtMDEtMjRUMTI6NDc6NDMuMjI4WiIsImV4cGlyeV9kYXRlIjoiMjAyNi0wNC0yMVQwMDowMDowMC4wMDBaIiwiaWF0IjoxNzM3NzIyODYzLCJleHAiOjE3NzY3Mjk2MDAsImlzcyI6Imh0dHBzOi8veW91cmV1ZGkuZGM0ZXUuZXUiLCJzdWIiOiJWckdRbUlYa1pZNVktOUxCWG43TUduU01DT1NOSnVIaTRjSUJHZ01QNkdrIiwiX3NkX2FsZyI6InNoYS0yNTYiLCJfc2QiOlsiQjJPRWsxalNweS02Z0Fmc21pb2Z2ZFZqeFgzSlBoZ0pmQXJLdXdpaXNCQSIsIlNVUnhpMjc3VzlzeWVlY2FHMWZIVDFyUTVCYnhQZkJBYkdpbjRRNDBHT28iLCJmZm9wSTlRczRFZDVFR3o5bm5RbGFfazZ6MnJWODNMXzYxRTNjWXA2OWtjIiwidk5kUWRCTlEyODFpb3N4S204SzB4NzV5WlMybGI1MEtRTndlOVVMNlRHOCIsIncwMzU3YV9uV2ZHaFlpR3ZvVGVTaXhSZzNzRzd0X3hQNmhEQjBaeGRNYkEiXX0.qVUfsWRZxMQsbzMR5kYNvNikJNEBjuEPMQ6npjRRAZrYz_-egFBVq0TivIOHfJ0hcYxIJh3kxIUzHBWjLV9yFQ~WyJyOWtyS1J6S3JVTU5TSXViTlJQOWp3IiwiZ2l2ZW5fbmFtZSIsIlNjYXJsZXR0Il0~WyJOQ2lYekI5ZjJYRWlwU2xtc0dPRWFRIiwiZmFtaWx5X25hbWUiLCJKb2hhbnNzb24iXQ~eyJ0eXAiOiJrYitqd3QiLCJhbGciOiJFUzI1NiJ9.eyJub25jZSI6IjA2NWY0NTQ4LTM3NzQtNDJhNS04MjYyLWU5NDhiMjIyNDhkMCIsImF1ZCI6InlvdXJmcmllbmRseXZlcmlmaWVyLmRjNGV1LmV1Iiwic2RfaGFzaCI6ImlfdjJQbUg5NnZ4eGJfbXQ3RmtIdkQ1aEdXeENOamhIdlpzYXlUSlA1alUiLCJpYXQiOjE3Mzc5Njk3Mzl9.4cJbdod2KnKoNAsaIyGlw4ehNl4JAEk9fw6lJqW8Kdq2a65iL9qsVgRSVGO11OuSKX663lUdjnAWA9_glnDUIQ"
//
//const ehic_sd_jwt_adam_driver = "eyJhbGciOiJFUzI1NiIsImtpZCI6ImRlZmF1bHRfc2lnbmluZ19rZXlfaWQiLCJ0eXAiOiJ2YytzZC1qd3QiLCJ2Y3RtIjpbImV5SjJZM1FpT2lKRlNFbERRM0psWkdWdWRHbGhiQ0lzSW01aGJXVWlPaUpGU0VsRElpd2laR1Z6WTNKcGNIUnBiMjRpT2lKVWFHbHpJR2x6SUdGdUlFVklTVU1nWkc5amRXMWxiblFnYVhOemRXVmtJR0o1SUhSb1pTQjNaV3hzSUd0dWIzZHVJRVZJU1VNZ1NYTnpkV1Z5SWl3aVpHbHpjR3hoZVNJNlczc2liR0Z1WnlJNkltVnVMVlZUSWl3aWJtRnRaU0k2SWtWSVNVTWlMQ0p5Wlc1a1pYSnBibWNpT25zaWMybHRjR3hsSWpwN0lteHZaMjhpT25zaWRYSnBJam9pYUhSMGNITTZMeTl5WVhjdVoybDBhSFZpZFhObGNtTnZiblJsYm5RdVkyOXRMMlJqTkdWMUwzWmpMems0TXpKaVlqUTVOR1ZqWkRrNE1tTXpZV0UxTm1Wa01XSTFNRFJsTTJFNE9EUmtORFprTWpNdmFXMWhaMlZ6TDJWb2FXTmpZWEprTG5CdVp5SXNJblZ5YVNOcGJuUmxaM0pwZEhraU9pSnphR0V5TlRZdE1USTBZelZtWldFeE5EaGtOVFkxTWpkaVlXRTNOekkxT1RrME1tSTJaV1UxTURVd1pUWXpOV05qT0Raak1qWTRabVEwTWpVNE4yUXdNakpoTmpsak55SXNJbUZzZEY5MFpYaDBJam9pUlVoSlF5QkRZWEprSW4wc0ltSmhZMnRuY205MWJtUmZZMjlzYjNJaU9pSWpNVEl4TURkaklpd2lkR1Y0ZEY5amIyeHZjaUk2SWlOR1JrWkdSa1lpZlN3aWMzWm5YM1JsYlhCc1lYUmxjeUk2VzNzaWRYSnBJam9pYUhSMGNITTZMeTl5WVhjdVoybDBhSFZpZFhObGNtTnZiblJsYm5RdVkyOXRMMlJqTkdWMUwzWmpMems0TXpKaVlqUTVOR1ZqWkRrNE1tTXpZV0UxTm1Wa01XSTFNRFJsTTJFNE9EUmtORFprTWpNdmFXMWhaMlZ6TDJWb2FXTlVaVzF3YkdGMFpTNXpkbWNpTENKMWNta2phVzUwWldkeWFYUjVJam9pYzJoaE1qVTJMV001TURnNVkySXlZemhpT0RRMVlUWTVPVGM0WTJNNVlXUmpNbVExTTJNNE9ESXdOMlZrTldFMU9EWXpPVGxpT1dGbFpHVTRaVEZoT1ROalpETXdOV0VpTENKd2NtOXdaWEowYVdWeklqcDdJbTl5YVdWdWRHRjBhVzl1SWpvaUlpd2lZMjlzYjNKZmMyTm9aVzFsSWpvaUlpd2lZMjl1ZEhKaGMzUWlPaUlpZlgxZGZYMWRMQ0pqYkdGcGJYTWlPbHQ3SW5CaGRHZ2lPbHNpYzI5amFXRnNYM05sWTNWeWFYUjVYM0JwYmlKZExDSmthWE53YkdGNUlqcGJleUpzWVc1bklqb2laVzR0VlZNaUxDSnNZV0psYkNJNklsTnZZMmxoYkNCVFpXTjFjbWwwZVNCT2RXMWlaWElpTENKa1pYTmpjbWx3ZEdsdmJpSTZJbFJvWlNCemIyTnBZV3dnYzJWamRYSnBkSGtnYm5WdFltVnlJRzltSUhSb1pTQkZTRWxESUdodmJHUmxjaUo5WFN3aWMyUWlPaUlpTENKemRtZGZhV1FpT2lKemIyTnBZV3hmYzJWamRYSnBkSGxmY0dsdUluMHNleUp3WVhSb0lqcGJJbU52YlhCbGRHVnVkRjlwYm5OMGFYUjFkR2x2YmlJc0ltbHVjM1JwZEhWMGFXOXVYMk52ZFc1MGNua2lYU3dpWkdsemNHeGhlU0k2VzNzaWJHRnVaeUk2SW1WdUxWVlRJaXdpYkdGaVpXd2lPaUpKYzNOMVpYSWdRMjkxYm5SeWVTSXNJbVJsYzJOeWFYQjBhVzl1SWpvaVZHaGxJR2x6YzNWbGNpQmpiM1Z1ZEhKNUlHOW1JSFJvWlNCRlNFbERJR2h2YkdSbGNpSjlYU3dpYzJRaU9pSWlMQ0p6ZG1kZmFXUWlPaUpwYzNOMVpYSmZZMjkxYm5SeWVTSjlMSHNpY0dGMGFDSTZXeUpqYjIxd1pYUmxiblJmYVc1emRHbDBkWFJwYjI0aUxDSnBibk4wYVhSMWRHbHZibDlwWkNKZExDSmthWE53YkdGNUlqcGJleUpzWVc1bklqb2laVzR0VlZNaUxDSnNZV0psYkNJNklrbHpjM1ZsY2lCSmJuTjBhWFIxZEdsdmJpQkRiMlJsSWl3aVpHVnpZM0pwY0hScGIyNGlPaUpVYUdVZ2FYTnpkV1Z5SUdsdWMzUnBkSFYwYVc5dUlHTnZaR1VnYjJZZ2RHaGxJRVZJU1VNZ2FHOXNaR1Z5SW4xZExDSnpaQ0k2SWlJc0luTjJaMTlwWkNJNkltbHpjM1ZsY2w5cGJuTjBhWFIxZEdsdmJsOWpiMlJsSW4wc2V5SndZWFJvSWpwYkltUnZZM1Z0Wlc1MFgybGtJbDBzSW1ScGMzQnNZWGtpT2x0N0lteGhibWNpT2lKbGJpMVZVeUlzSW14aFltVnNJam9pU1dSbGJuUnBabWxqWVhScGIyNGdZMkZ5WkNCdWRXMWlaWElpTENKa1pYTmpjbWx3ZEdsdmJpSTZJbFJvWlNCSlpHVnVkR2xtYVdOaGRHbHZiaUJqWVhKa0lHNTFiV0psY2lCdlppQjBhR1VnUlVoSlF5Qm9iMnhrWlhJaWZWMHNJbk5rSWpvaUlpd2ljM1puWDJsa0lqb2lhV1JsYm5ScFptbGpZWFJwYjI1ZmJuVnRZbVZ5WDJOaGNtUWlmU3g3SW5CaGRHZ2lPbHNpY0dWeWFXOWtYMlZ1ZEdsMGJHVnRaVzUwSWl3aVpXNWthVzVuWDJSaGRHVWlYU3dpWkdsemNHeGhlU0k2VzNzaWJHRnVaeUk2SW1WdUxWVlRJaXdpYkdGaVpXd2lPaUpGZUhCcGNua2dSR0YwWlNJc0ltUmxjMk55YVhCMGFXOXVJam9pVkdobElHUmhkR1VnWVc1a0lIUnBiV1VnWlhod2FYSmxaQ0IwYUdseklHTnlaV1JsYm5ScFlXd2lmVjBzSW5Oa0lqb2lJaXdpYzNablgybGtJam9pWlhod2FYSjVYMlJoZEdVaWZWMHNJbk5qYUdWdFlWOTFjbXdpT2lJaUxDSnpZMmhsYldGZmRYSnNJMmx1ZEdWbmNtbDBlU0k2SWlJc0ltVjRkR1Z1WkhNaU9pSWlMQ0psZUhSbGJtUnpJMmx1ZEdWbmNtbDBlU0k2SWlKOSJdfQ.eyJfc2QiOlsiNE91cnpQVl9BX1dPaDR0MHU4OUpWOWoyY1dHQ0tXTHY3YW5qRHJha19tUSIsIkRrWWZuZVNqbXRhLU14OHZzYXp3NnRlam1TRS1jMzZnVUduQjA1NVVyTU0iLCJyZldLbXVRdzgyemw3SHhPc3Flb0oxaDAwNTk5WXRVVS1nSmh1TkU1d0w4IiwiT2IyOVdnZE5ON3psR2hINWJyYmNqRC16Zk9yOTZuS0pRcDROVkZzTUVKYyIsIlJyLXhqdnFLckRvdFlTcTRzN0RhTEgxNUs1blMyNC0wVGNoWnpmWUpIQ2ciXSwiX3NkX2FsZyI6InNoYS0yNTYiLCJjbmYiOnsiandrIjp7ImtpZCI6ImRlZmF1bHRfc2lnbmluZ19rZXlfaWQiLCJjcnYiOiJQLTI1NiIsImt0eSI6IkVDIiwieCI6IkNkajd6MHFna2hpRHFVY2RRTFBINGMzaDNpY1Q0Yk9QNWFJampVX2h1LUkiLCJ5IjoiRnlfdnozd25jNXQxb1dJTVh0YVNoZXhVZGRZLUV5blJPZGFpRFJ0ZGY2MCJ9fSwiZXhwIjoxNzcwMjA5ODg1LCJpc3MiOiJodHRwczovL2lzc3Vlci5zdW5ldC5zZSIsIm5iZiI6MTczODY3Mzg4NSwidmN0IjoiRUhJQ0NyZWRlbnRpYWwifQ.WYcIyj850e8OBfDss5As9Jf1tauwXeqRSLWEO2B_hxE6RBtfGRmnK7W8MEkpRpxjdSM731UkDVI7ddXDY0Ygig~WyI3SkZKLUJCQjlPOC1mNjVlcHB5RmlRIiwic3ViamVjdCIseyJkYXRlX29mX2JpcnRoIjoiMTk4OC0wOS0yNyIsImZhbWlseV9uYW1lIjoiRHJpdmVyIiwiZm9yZW5hbWUiOiJBZGFtIn1d~WyJwUUhsd1h6bVhCRl96Y2FZZWlVcUZBIiwic29jaWFsX3NlY3VyaXR5X3BpbiIsIjI5ODk5NTQ4Il0~WyJ6R0ctWndZd1l1Q0VNZkFlbjV2RC1RIiwicGVyaW9kX2VudGl0bGVtZW50Iix7ImVuZGluZ19kYXRlIjoiMjAyNi0wNC0xMiIsInN0YXJ0aW5nX2RhdGUiOiIyMDIzLTA5LTEyIn1d~WyJ3RW9BWmtJMUJVS1lvYXhMNHFZaUlnIiwiZG9jdW1lbnRfaWQiLCI4MDI0NjgwMjQ2MDAwMzkyOTY5MSJd~WyJKX21wTTZGMEktRlJ6WEl6QXJmNWNnIiwiY29tcGV0ZW50X2luc3RpdHV0aW9uIix7Imluc3RpdHV0aW9uX2NvdW50cnkiOiJGUiIsImluc3RpdHV0aW9uX2lkIjoiQ0xFSVNTIiwiaW5zdGl0dXRpb25fbmFtZSI6Ikdyb3VwZSBDYWlzc2UgZGVzIETDqXDDtHRzIGFzc2lzdGVkIGJ5IHRoZSBDZW50cmUgb2YgRXVyb3BlYW4gYW5kIEludGVybmF0aW9uYWwgTGlhaXNvbnMgZm9yIFNvY2lhbCBTZWN1cml0eSJ9XQ~"
//
//const sphereon_vp_token = "eyJ0eXAiOiJ2YytzZC1qd3QiLCJraWQiOiJkaWQ6d2ViOmFnZW50LmZpbmR5bmV0LmRlbW8uc3BoZXJlb24uY29tIzAzYzk4NTNmMTAzNjhiMDU3ZjAzM2FmMTU2OGI1MmIyNGVlMzg5MDU1YjczMTYyZjhmNGFlZjdkMDBhZmQ5ZTRkNyIsImFsZyI6IkVTMjU2In0.eyJ2Y3QiOiJQZW5zaW9uU2RKd3QiLCJQZW5zaW9uIjp7Il9zZCI6WyI0Vk9xMjhVaFREenMzeXk0M082UnFHbU9SRWpFVEJxdVZzNTBiaVZVVnZzIiwiTWh2YlVjNEtyQ3RKZU93a2U5Q05IYkVhbUhPYVZSRkxGempGVUhMc0doZyIsImVxOVNkcGY5MUdzZDgtcmhmcmZwTmJwZjl3VUF5bm1rNHl0WFZqaW1pNnciLCJuR2xpejc5cWo3dGgwajFubjJHa0pETUFkZTBMRThuVWtFcy1qbHk4aXdrIiwibzZXc3A3UEtGbEJLSVlxakxZU3Znc1pXUWxwNUNTQ1c0TGxlQzd0eGhQQSJdfSwiUGVyc29uIjp7Il9zZCI6WyI0TDBzTmVSa1FLeVdiWTB3amlETU9QUWFiUXJfNWhMVEtCdGFmTkFxQWZjIiwiRjZsM0Q1UWIzQkd6eEpHdC1Qc285dDBxbFdoRWU0ZDlzNW9RLTNGMXlCWSIsIkZiR0xNMnFpeHNoMGdLZ21qbFZRQUctRFRqdV9fblZoQmgzZUJoX2x1TXciLCJJNGxMOExaLVZsdTB1MVVlLU9oTjZoTzFNYW1GMVZvUXRkNk1YWTR5YzdRIl19LCJleHBpcmF0aW9uRGF0ZSI6IjIwMjYtMDItMTJUMDA6MDM6NDMuNzc4WiIsInN0YXR1cyI6eyJzdGF0dXNfbGlzdCI6eyJ1cmkiOiJodHRwczovL2FnZW50LmZpbmR5bmV0LmRlbW8uc3BoZXJlb24uY29tL3ZjL3N0YXR1cy1saXN0cy9wZW5zaW9uY3JlZGVudGlhbC1vYXV0aCIsImlkeCI6ODAwODV9fSwiY25mIjp7ImtpZCI6ImRpZDpqd2s6ZXlKaGJHY2lPaUpGVXpJMU5pSXNJblZ6WlNJNkluTnBaeUlzSW10MGVTSTZJa1ZESWl3aVkzSjJJam9pVUMweU5UWWlMQ0o0SWpvaVdHazBhMXBUWW1OaWRYVnZUMDh3ZVhoNWNESm9TUzA0TVZCemQzRjFUSEJ0U2xveVIybHhWM0pLZHlJc0lua2lPaUpVTTFSMVlXSjBhMFYwWDNkcGJGaHBVRTFEZWxCWk4zSnVNVWxIVUZjMlRpMXNORUZhUTE5VE9GaDNJbjAjMCJ9LCJpc3MiOiJkaWQ6d2ViOmFnZW50LmZpbmR5bmV0LmRlbW8uc3BoZXJlb24uY29tIiwiaWF0IjoxNzM5MzE1MDIzLCJfc2RfYWxnIjoic2hhLTI1NiJ9.7Sdid1hKMaYAWVJE3GldqT0fHK-koGSghSE0Lws0DOI6Dez-P5Vxfj2nFYnsDSjubNelP4DgzGLIlBjNFloLtA~WyJjZmY0NjYxNy1iYzhiLTQ1MDgtODc1Ny0zY2ZkYmJjYmE4ZjYiLCJlbmREYXRlIiwiMjA3MC0wNS0xMCJd~WyI0MzEzMWRhNy1mOTZlLTQ0MGItODRlMC1jNzEwYTJmNjc4ZWUiLCJwcm92aXNpb25hbCIsIiJd~WyIyZWUyZWMwNS1mN2IwLTQ2NTgtODBkNS05ZjUzM2RjODhhZTYiLCJzdGFydERhdGUiLCIyMDQwLTAxLTAxIl0~WyI0MzA2OTg5Mi0zMjRkLTQzZjAtOWQ1Ny0zNWJmMGY2YjYxZTAiLCJ0eXBlQ29kZSIsIlBSRSJd~WyI4ZGE3ZGNlMS1kMDUyLTRlYzgtYmM4MC03NDY2ZDAxZGRkOTAiLCJmYW1pbHlfbmFtZSIsIkRvZSJd~WyI4OWI5OTY5Yi04Y2I1LTQ5NGMtODc2Ny1hZGY1MDFlMTZjNjciLCJwZXJzb25hbF9hZG1pbmlzdHJhdGl2ZV9udW1iZXIiLCIxMjM0NTY3OCJd~eyJ0eXAiOiJrYitqd3QiLCJhbGciOiJFUzI1NiJ9.eyJpYXQiOjE3MzkzMjM1MTcsIm5vbmNlIjoiYWJlYmM0MWUtZDU4Ni00N2E0LTg2NzYtNTdjOGQ0OGZiODhiIiwic2RfaGFzaCI6IjhTTnhvY3Y4bmZCbURZdHR1b2IyWXlNTldrT0pTQ2hMNnJBbTFXSDNpRzQiLCJhdWQiOiJkaWQ6d2ViOmFnZW50LmZpbmR5bmV0LmRlbW8uc3BoZXJlb24uY29tIn0.Hv_klG1XNl6ws0zyK951GQBar5dQiyW1QPEtP6bThAhJ5VSoGcYd7lFJT5ss35lqIcr6G-DfN743zi8QcM-9lA"
//
//const acme_vc_sd_jwt_with_holder_binding = "eyJ0eXAiOiJ2YytzZC1qd3QiLCJ2Y3RtIjpbImV5SjJZM1FpT2lKMWNtNDZZM0psWkdWdWRHbGhiRHBsYUdsaklpd2libUZ0WlNJNklrVklTVU1pTENKa1pYTmpjbWx3ZEdsdmJpSTZJbFJvYVhNZ2FYTWdZU0JGZFhKdmNHVmhiaUJJWldGc2RHZ2dTVzV6ZFhKaGJtTmxJRU5oY21RZ2RtVnlhV1pwWVdKc1pTQmpjbVZrWlc1MGFXRnNJaXdpWkdsemNHeGhlU0k2VzNzaWJHRnVaeUk2SW1WdUxWVlRJaXdpYm1GdFpTSTZJa1ZJU1VNaUxDSnlaVzVrWlhKcGJtY2lPbnNpYzJsdGNHeGxJanA3SW1KaFkydG5jbTkxYm1SZlkyOXNiM0lpT2lJak1XSXlOak5pSWl3aWRHVjRkRjlqYjJ4dmNpSTZJaU5HUmtaR1JrWWlmU3dpYzNablgzUmxiWEJzWVhSbGN5STZXM3NpZFhKcElqb2lhSFIwY0hNNkx5OWxhR2xqTFdsemMzVmxjaTUzZDNkaGJHeGxkQzV2Y21jdmFXMWhaMlZ6TDNSbGJYQnNZWFJsTG5OMlp5SjlYWDE5WFN3aVkyeGhhVzF6SWpwYmV5SndZWFJvSWpwYkltZHBkbVZ1WDI1aGJXVWlYU3dpWkdsemNHeGhlU0k2VzNzaWJHRnVaeUk2SW1WdUxWVlRJaXdpYkdGaVpXd2lPaUpIYVhabGJpQk9ZVzFsSWl3aVpHVnpZM0pwY0hScGIyNGlPaUpVYUdVZ1oybDJaVzRnYm1GdFpTQnZaaUIwYUdVZ1JVaEpReUJvYjJ4a1pYSWlmVjBzSW5OMloxOXBaQ0k2SW1kcGRtVnVYMjVoYldVaWZTeDdJbkJoZEdnaU9sc2labUZ0YVd4NVgyNWhiV1VpWFN3aVpHbHpjR3hoZVNJNlczc2liR0Z1WnlJNkltVnVMVlZUSWl3aWJHRmlaV3dpT2lKR1lXMXBiSGtnVG1GdFpTSXNJbVJsYzJOeWFYQjBhVzl1SWpvaVZHaGxJR1poYldsc2VTQnVZVzFsSUc5bUlIUm9aU0JGU0VsRElHaHZiR1JsY2lKOVhTd2ljM1puWDJsa0lqb2labUZ0YVd4NVgyNWhiV1VpZlN4N0luQmhkR2dpT2xzaVltbHlkR2hmWkdGMFpTSmRMQ0prYVhOd2JHRjVJanBiZXlKc1lXNW5Jam9pWlc0dFZWTWlMQ0pzWVdKbGJDSTZJa0pwY25Sb0lFUmhkR1VpTENKa1pYTmpjbWx3ZEdsdmJpSTZJbFJvWlNCaWFYSjBhQ0JrWVhSbElHOW1JSFJvWlNCRlNFbERJR2h2YkdSbGNpSjlYU3dpYzNablgybGtJam9pWW1seWRHaGZaR0YwWlNKOUxIc2ljR0YwYUNJNld5SnpjMjRpWFN3aVpHbHpjR3hoZVNJNlczc2liR0Z1WnlJNkltVnVMVlZUSWl3aWJHRmlaV3dpT2lKVGIyTnBZV3dnVTJWamRYSnBkSGtnVG5WdFltVnlJaXdpWkdWelkzSnBjSFJwYjI0aU9pSlVhR1VnYzI5amFXRnNJSE5sWTNWeWFYUjVJRzUxYldKbGNpQnZaaUIwYUdVZ1JVaEpReUJvYjJ4a1pYSWlmVjBzSW5OMloxOXBaQ0k2SW5OemJpSjlMSHNpY0dGMGFDSTZXeUpwYzNOMVpYSmZZMjkxYm5SeWVTSmRMQ0prYVhOd2JHRjVJanBiZXlKc1lXNW5Jam9pWlc0dFZWTWlMQ0pzWVdKbGJDSTZJa2x6YzNWbGNpQkRiM1Z1ZEhKNUlpd2laR1Z6WTNKcGNIUnBiMjRpT2lKVWFHVWdhWE56ZFdWeUlHTnZkVzUwY25rZ2IyWWdkR2hsSUVWSVNVTWdhRzlzWkdWeUluMWRMQ0p6ZG1kZmFXUWlPaUpwYzNOMVpYSmZZMjkxYm5SeWVTSjlMSHNpY0dGMGFDSTZXeUpwYzNOMVpYSmZhVzV6ZEdsMGRYUnBiMjVmWTI5a1pTSmRMQ0prYVhOd2JHRjVJanBiZXlKc1lXNW5Jam9pWlc0dFZWTWlMQ0pzWVdKbGJDSTZJa2x6YzNWbGNpQkpibk4wYVhSMWRHbHZiaUJEYjJSbElpd2laR1Z6WTNKcGNIUnBiMjRpT2lKVWFHVWdhWE56ZFdWeUlHbHVjM1JwZEhWMGFXOXVJR052WkdVZ2IyWWdkR2hsSUVWSVNVTWdhRzlzWkdWeUluMWRMQ0p6ZG1kZmFXUWlPaUpwYzNOMVpYSmZhVzV6ZEdsMGRYUnBiMjVmWTI5a1pTSjlMSHNpY0dGMGFDSTZXeUpsZUhCcGNubGZaR0YwWlNKZExDSmthWE53YkdGNUlqcGJleUpzWVc1bklqb2laVzR0VlZNaUxDSnNZV0psYkNJNklrVjRjR2x5ZVNCRVlYUmxJaXdpWkdWelkzSnBjSFJwYjI0aU9pSlVhR1VnWkdGMFpTQmhibVFnZEdsdFpTQmxlSEJwY21Wa0lIUm9hWE1nWTNKbFpHVnVkR2xoYkNKOVhTd2ljM1puWDJsa0lqb2laWGh3YVhKNVgyUmhkR1VpZlYxOSJdLCJ4NWMiOlsiTUlJQjNEQ0NBWUVDRkhCRFdwa0xpNjRmNVpyRjB4dXl0ajVQSXJicU1Bb0dDQ3FHU000OUJBTUNNSEF4Q3pBSkJnTlZCQVlUQWtkU01ROHdEUVlEVlFRSURBWkJkR2hsYm5NeEVEQU9CZ05WQkFjTUIwbHNiR2x6YVdFeEVUQVBCZ05WQkFvTUNIZDNWMkZzYkdWME1SRXdEd1lEVlFRTERBaEpaR1Z1ZEdsMGVURVlNQllHQTFVRUF3d1BkM2QzWVd4c1pYUXRhWE56ZFdWeU1CNFhEVEkwTURreU5qQTRNVFF4TWxvWERUTTBNRGt5TkRBNE1UUXhNbG93Y0RFTE1Ba0dBMVVFQmhNQ1IxSXhEekFOQmdOVkJBZ01Ca0YwYUdWdWN6RVFNQTRHQTFVRUJ3d0hTV3hzYVhOcFlURVJNQThHQTFVRUNnd0lkM2RYWVd4c1pYUXhFVEFQQmdOVkJBc01DRWxrWlc1MGFYUjVNUmd3RmdZRFZRUUREQTkzZDNkaGJHeGxkQzFwYzNOMVpYSXdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0FBUXRZOWtVUUZmRGY2aW9jRkU0clJ2eTNHTXlZeXBxbVgzWmptd1VlWEp5MGtrZ1JUNzNDOCtXUGtXTmcveWRKSENFRERPNVh1UmFJYU9IYzlEcExwTlNNQW9HQ0NxR1NNNDlCQU1DQTBrQU1FWUNJUUR6dzI3bkJyN0U4TjZHcWM4M3YvNis5aXppL05FWEJLbG9qd0xKQWVTbHNBSWhBTzJKZGpQRXozYkQwc3RvV0VnN1JEdHJBbThkc2dyeUN5MVc1QkRHQ1ZkTiJdLCJhbGciOiJFUzI1NiJ9.eyJjbmYiOnsiandrIjp7ImNydiI6IlAtMjU2IiwiZXh0Ijp0cnVlLCJrZXlfb3BzIjpbInZlcmlmeSJdLCJrdHkiOiJFQyIsIngiOiI5emlYT1Iyb2hDOXF5ZHFoMmM2SkxkSWxrT1JLbFRCWEhqSW1tc2FyNGlzIiwieSI6IjV5RmExdWVhRW41b1FwRkJWRlpvRDU0STBieXdOdnIxOFNCZU8ySm5oZ1EifX0sInZjdCI6InVybjpjcmVkZW50aWFsOmVoaWMiLCJqdGkiOiJ1cm46ZWhpYzpiZjc2YTdmZS1kYjUxLTQxN2QtODcwOS01MjdjZjYwMDczMDkiLCJleHBpcnlfZGF0ZSI6IjIwMzUtMDQtMjFUMDA6MDA6MDAuMDAwWiIsImV4cCI6MTc2OTg1ODc3MCwiaWF0IjoxNzM4MzIyNzcwLCJpc3MiOiJodHRwczovL2VoaWMtaXNzdWVyLnd3d2FsbGV0Lm9yZyIsInN1YiI6Ii1CR2EwTzNWWlJURTF6TThTRW9BaGdReXIwVlJ4R1UwRlJYYTktdVRudzAiLCJfc2RfYWxnIjoic2hhLTI1NiIsIl9zZCI6WyJVeVdGcC1qeURzV01Ua2pvb1VmQ0JGYUMtU2x5eDBUS09rcjFUbVoyZTRJIiwiWVZwaEluSXkyUjU2UkpLSkwwd01UUWVaaVdySG04OVdjOEdiWXBjeGd3byIsIll3d1RIQ05CcDFIeVBtckVHTlpPXzB2bnpBTk9ZTHZ4cF9ETzlVaHZjX1UiLCJfUWdQa0RaQ0UyWjRnelRSWGduZWZxYjFkWHpyaFVhVXV6ZENLT3BwVHA4Iiwid3IxYWprNHpxM25FQ3dDWFRfaFdsMWdqTFVqdEEyZTYyS3hmMVpValBqQSIsInpRT1A3enhxOXRpc2hlcWdFUE1hQ0VyamdqZmdxbUgzNlhsWUNfblc5eTQiXX0.s1wLAcSe9CDoonNpbLzRpxoBchzPx4ZqPribZCaHW7BYihw_cnEqZEIV2eVn3RudMuXG04nawmddUi0lRH-ndA~WyJxanBUT2tFdnZGU1pxQkdXTkI2MHpnIiwic3NuIiwiMTIzMTMyMTMyMTMiXQ~WyJNQUFMVjVYZWczbm83NnNtUHl4elFRIiwiZmFtaWx5X25hbWUiLCJEb2UiXQ~WyJDSkdJOHB6N3Z2cGpmd21ZT0RSSmFRIiwiZ2l2ZW5fbmFtZSIsIkpvaG4iXQ~WyJzaEk1WTBhOWU2dzN4ZlViVVdUN0NBIiwiYmlydGhfZGF0ZSIsIjE5OTAtMTAtMTVUMDA6MDA6MDAuMDAwWiJd~eyJ0eXAiOiJrYitqd3QiLCJhbGciOiJFUzI1NiJ9.eyJub25jZSI6IjkzZDVjNDY5LTAxN2EtNGFkNS04YTRhLTkwNGEzMDJiMzVlMyIsImF1ZCI6InZlcmlmaWVyLmVkaXBsb21hcy5nciIsInNkX2hhc2giOiJUdTF0OUoxYnQ5WXByR1hVVklDODNvdzEwSnljbEJzQkJEQi1FOWdQQVZVIiwiaWF0IjoxNzM4MzIyODcwfQ.wrttGpzHApQXArry5u0HLsWkLrbIcep87mHBlMJo5VQ35_2TckGhGjbQf1K9bIEBof4w8eGIj7oi1KmRcTGOSA"
//
//// standardBase64Decode to decode a "base64:..." from acme verifier
//func standardBase64Decode(base64str string) (string, error) {
//	if strings.HasPrefix(base64str, "b64:") {
//		decoded, err := base64.StdEncoding.DecodeString(base64str[4:])
//		if err != nil {
//			return "", err
//		}
//		return string(decoded), nil
//	}
//	decoded, err := base64.StdEncoding.DecodeString(base64str[4:])
//	if err != nil {
//		return "", err
//	}
//	return string(decoded), nil
//}
//
//func TestDecode(t *testing.T) {
//	encoded := "b64:ZXlKMGVYQWlPaUoyWXl0elpDMXFkM1FpTENKMlkzUnRJanBiSW1WNVNqSlpNMUZwVDJsS01XTnRORFpaTTBwc1drZFdkV1JIYkdoaVJIQnNZVWRzYWtscGQybGliVVowV2xOSk5rbHJWa2xUVlUxcFRFTkthMXBZVG1wamJXeDNaRWRzZG1KcFNUWkpiRkp2WVZoTloyRllUV2RaVTBKR1pGaEtkbU5IVm1oaWFVSkpXbGRHYzJSSFoyZFRWelY2WkZoS2FHSnRUbXhKUlU1b1kyMVJaMlJ0Vm5saFYxcHdXVmRLYzFwVFFtcGpiVlpyV2xjMU1HRlhSbk5KYVhkcFdrZHNlbU5IZUdobFUwazJWek56YVdKSFJuVmFlVWsyU1cxV2RVeFdWbFJKYVhkcFltMUdkRnBUU1RaSmExWkpVMVZOYVV4RFNubGFWelZyV2xoS2NHSnRZMmxQYm5OcFl6SnNkR05IZUd4SmFuQTNTVzFLYUZreWRHNWpiVGt4WW0xU1psa3lPWE5pTTBscFQybEphazFYU1hsT2FrNXBTV2wzYVdSSFZqUmtSamxxWWpKNGRtTnBTVFpKYVU1SFVtdGFSMUpyV1dsbVUzZHBZek5hYmxnelVteGlXRUp6V1ZoU2JHTjVTVFpYTTNOcFpGaEtjRWxxYjJsaFNGSXdZMGhOTmt4NU9XeGhSMnhxVEZkc2VtTXpWbXhqYVRVelpETmthR0pIZUd4a1F6VjJZMjFqZG1GWE1XaGFNbFo2VEROU2JHSllRbk5aV0ZKc1RHNU9NbHA1U2psWVdERTVXRk4zYVZreWVHaGhWekY2U1dwd1ltVjVTbmRaV0ZKdlNXcHdZa2x0WkhCa2JWWjFXREkxYUdKWFZXbFlVM2RwV2tkc2VtTkhlR2hsVTBrMlZ6TnphV0pIUm5WYWVVazJTVzFXZFV4V1ZsUkphWGRwWWtkR2FWcFhkMmxQYVVwSVlWaGFiR0pwUWs5WlZ6RnNTV2wzYVZwSFZucFpNMHB3WTBoU2NHSXlOR2xQYVVwVllVZFZaMW95YkRKYVZ6Um5ZbTFHZEZwVFFuWmFhVUl3WVVkVloxSlZhRXBSZVVKdllqSjRhMXBZU1dsbVZqQnpTVzVPTWxveE9YQmFRMGsyU1cxa2NHUnRWblZZTWpWb1lsZFZhV1pUZURkSmJrSm9aRWRuYVU5c2MybGFiVVowWVZkNE5WZ3lOV2hpVjFWcFdGTjNhVnBIYkhwalIzaG9aVk5KTmxjemMybGlSMFoxV25sSk5rbHRWblZNVmxaVVNXbDNhV0pIUm1sYVYzZHBUMmxLUjFsWE1YQmlTR3RuVkcxR2RGcFRTWE5KYlZKc1l6Sk9lV0ZZUWpCaFZ6bDFTV3B2YVZaSGFHeEpSMXBvWWxkc2MyVlRRblZaVnpGc1NVYzViVWxJVW05YVUwSkdVMFZzUkVsSGFIWmlSMUpzWTJsS09WaFRkMmxqTTFwdVdESnNhMGxxYjJsYWJVWjBZVmQ0TlZneU5XaGlWMVZwWmxONE4wbHVRbWhrUjJkcFQyeHphVmx0Ykhsa1IyaG1Xa2RHTUZwVFNtUk1RMHByWVZoT2QySkhSalZKYW5CaVpYbEtjMWxYTlc1SmFtOXBXbGMwZEZaV1RXbE1RMHB6V1ZkS2JHSkRTVFpKYTBwd1kyNVNiMGxGVW1oa1IxVnBURU5LYTFwWVRtcGpiV3gzWkVkc2RtSnBTVFpKYkZKdldsTkNhV0ZZU2pCaFEwSnJXVmhTYkVsSE9XMUpTRkp2V2xOQ1JsTkZiRVJKUjJoMllrZFNiR05wU2psWVUzZHBZek5hYmxneWJHdEphbTlwV1cxc2VXUkhhR1phUjBZd1dsTktPVXhJYzJsalIwWXdZVU5KTmxkNVNucGpNalJwV0ZOM2FWcEhiSHBqUjNob1pWTkpObGN6YzJsaVIwWjFXbmxKTmtsdFZuVk1WbFpVU1dsM2FXSkhSbWxhVjNkcFQybEtWR0l5VG5CWlYzZG5WVEpXYW1SWVNuQmtTR3RuVkc1V2RGbHRWbmxKYVhkcFdrZFdlbGt6U25CalNGSndZakkwYVU5cFNsVmhSMVZuWXpJNWFtRlhSbk5KU0U1c1dUTldlV0ZZVWpWSlJ6VXhZbGRLYkdOcFFuWmFhVUl3WVVkVloxSlZhRXBSZVVKdllqSjRhMXBZU1dsbVZqQnpTVzVPTWxveE9YQmFRMGsyU1c1T2VtSnBTamxNU0hOcFkwZEdNR0ZEU1RaWGVVcHdZek5PTVZwWVNtWlpNamt4WW01U2VXVlRTbVJNUTBwcllWaE9kMkpIUmpWSmFuQmlaWGxLYzFsWE5XNUphbTlwV2xjMGRGWldUV2xNUTBweldWZEtiR0pEU1RaSmEyeDZZek5XYkdOcFFrUmlNMVoxWkVoS05VbHBkMmxhUjFaNldUTktjR05JVW5CaU1qUnBUMmxLVldGSFZXZGhXRTU2WkZkV2VVbEhUblprVnpVd1kyNXJaMkl5V1dka1IyaHNTVVZXU1ZOVlRXZGhSemx6V2tkV2VVbHVNV1JNUTBwNlpHMWtabUZYVVdsUGFVcHdZek5PTVZwWVNtWlpNamt4WW01U2VXVlRTamxNU0hOcFkwZEdNR0ZEU1RaWGVVcHdZek5PTVZwWVNtWmhWelY2WkVkc01HUllVbkJpTWpWbVdUSTVhMXBUU21STVEwcHJZVmhPZDJKSFJqVkphbkJpWlhsS2MxbFhOVzVKYW05cFdsYzBkRlpXVFdsTVEwcHpXVmRLYkdKRFNUWkphMng2WXpOV2JHTnBRa3BpYms0d1lWaFNNV1JIYkhaaWFVSkVZakpTYkVscGQybGFSMVo2V1ROS2NHTklVbkJpTWpScFQybEtWV0ZIVldkaFdFNTZaRmRXZVVsSGJIVmpNMUp3WkVoV01HRlhPWFZKUjA1MldrZFZaMkl5V1dka1IyaHNTVVZXU1ZOVlRXZGhSemx6V2tkV2VVbHVNV1JNUTBwNlpHMWtabUZYVVdsUGFVcHdZek5PTVZwWVNtWmhWelY2WkVkc01HUllVbkJpTWpWbVdUSTVhMXBUU2psTVNITnBZMGRHTUdGRFNUWlhlVXBzWlVoQ2NHTnViR1phUjBZd1dsTktaRXhEU210aFdFNTNZa2RHTlVscWNHSmxlVXB6V1ZjMWJrbHFiMmxhVnpSMFZsWk5hVXhEU25OWlYwcHNZa05KTmtsclZqUmpSMng1WlZOQ1JWbFlVbXhKYVhkcFdrZFdlbGt6U25CalNGSndZakkwYVU5cFNsVmhSMVZuV2tkR01GcFRRbWhpYlZGblpFZHNkRnBUUW14bFNFSndZMjFXYTBsSVVtOWhXRTFuV1ROS2JGcEhWblZrUjJ4b1lrTktPVmhUZDJsak0xcHVXREpzYTBscWIybGFXR2gzWVZoS05WZ3lVbWhrUjFWcFpsWXhPU0pkTENKNE5XTWlPbHNpVFVsSlFqTkVRME5CV1VWRFJraENSRmR3YTB4cE5qUm1OVnB5UmpCNGRYbDBhalZRU1hKaWNVMUJiMGREUTNGSFUwMDBPVUpCVFVOTlNFRjRRM3BCU2tKblRsWkNRVmxVUVd0a1UwMVJPSGRFVVZsRVZsRlJTVVJCV2tKa1IyaHNZbTVOZUVWRVFVOUNaMDVXUWtGalRVSXdiSE5pUjJ4NllWZEZlRVZVUVZCQ1owNVdRa0Z2VFVOSVpETldNa1p6WWtkV01FMVNSWGRFZDFsRVZsRlJURVJCYUVwYVIxWjFaRWRzTUdWVVJWbE5RbGxIUVRGVlJVRjNkMUJrTTJReldWZDRjMXBZVVhSaFdFNTZaRmRXZVUxQ05GaEVWRWt3VFVScmVVNXFRVFJOVkZGNFRXeHZXRVJVVFRCTlJHdDVUa1JCTkUxVVVYaE5iRzkzWTBSRlRFMUJhMGRCTVZWRlFtaE5RMUl4U1hoRWVrRk9RbWRPVmtKQlowMUNhMFl3WVVkV2RXTjZSVkZOUVRSSFFURlZSVUozZDBoVFYzaHpZVmhPY0ZsVVJWSk5RVGhIUVRGVlJVTm5kMGxrTTJSWVdWZDRjMXBZVVhoRlZFRlFRbWRPVmtKQmMwMURSV3hyV2xjMU1HRllValZOVW1kM1JtZFpSRlpSVVVSRVFUa3paRE5rYUdKSGVHeGtRekZ3WXpOT01WcFlTWGRYVkVGVVFtZGpjV2hyYWs5UVVVbENRbWRuY1docmFrOVFVVTFDUW5kT1EwRkJVWFJaT1d0VlVVWm1SR1kyYVc5alJrVTBjbEoyZVROSFRYbFplWEJ4YlZneldtcHRkMVZsV0VwNU1HdHJaMUpVTnpORE9DdFhVR3RYVG1jdmVXUktTRU5GUkVSUE5WaDFVbUZKWVU5SVl6bEVjRXh3VGxOTlFXOUhRME54UjFOTk5EbENRVTFEUVRCclFVMUZXVU5KVVVSNmR6STNia0p5TjBVNFRqWkhjV000TTNZdk5pczVhWHBwTDA1RldFSkxiRzlxZDB4S1FXVlRiSE5CU1doQlR6SktaR3BRUlhvellrUXdjM1J2VjBWbk4xSkVkSEpCYlRoa2MyZHllVU41TVZjMVFrUkhRMVprVGlKZExDSmhiR2NpT2lKRlV6STFOaUo5LmV5SmpibVlpT25zaWFuZHJJanA3SW1OeWRpSTZJbEF0TWpVMklpd2laWGgwSWpwMGNuVmxMQ0pyWlhsZmIzQnpJanBiSW5abGNtbG1lU0pkTENKcmRIa2lPaUpGUXlJc0luZ2lPaUk1ZW1sWVQxSXliMmhET1hGNVpIRm9NbU0yU2t4a1NXeHJUMUpMYkZSQ1dFaHFTVzF0YzJGeU5HbHpJaXdpZVNJNklqVjVSbUV4ZFdWaFJXNDFiMUZ3UmtKV1JscHZSRFUwU1RCaWVYZE9kbkl4T0ZOQ1pVOHlTbTVvWjFFaWZYMHNJblpqZENJNkluVnlianBqY21Wa1pXNTBhV0ZzT21Wb2FXTWlMQ0pxZEdraU9pSjFjbTQ2WldocFl6cGlaamMyWVRkbVpTMWtZalV4TFRReE4yUXRPRGN3T1MwMU1qZGpaall3TURjek1Ea2lMQ0psZUhCcGNubGZaR0YwWlNJNklqSXdNelV0TURRdE1qRlVNREE2TURBNk1EQXVNREF3V2lJc0ltVjRjQ0k2TVRjMk9UZzFPRGMzTUN3aWFXRjBJam94TnpNNE16SXlOemN3TENKcGMzTWlPaUpvZEhSd2N6b3ZMMlZvYVdNdGFYTnpkV1Z5TG5kM2QyRnNiR1YwTG05eVp5SXNJbk4xWWlJNklpMUNSMkV3VHpOV1dsSlVSVEY2VFRoVFJXOUJhR2RSZVhJd1ZsSjRSMVV3UmxKWVlUa3RkVlJ1ZHpBaUxDSmZjMlJmWVd4bklqb2ljMmhoTFRJMU5pSXNJbDl6WkNJNld5SlZlVmRHY0MxcWVVUnpWMDFVYTJwdmIxVm1RMEpHWVVNdFUyeDVlREJVUzA5cmNqRlViVm95WlRSSklpd2lXVlp3YUVsdVNYa3lValUyVWtwTFNrd3dkMDFVVVdWYWFWZHlTRzA0T1Zkak9FZGlXWEJqZUdkM2J5SXNJbGwzZDFSSVEwNUNjREZJZVZCdGNrVkhUbHBQWHpCMmJucEJUazlaVEhaNGNGOUVUemxWYUhaalgxVWlMQ0pmVVdkUWEwUmFRMFV5V2pSbmVsUlNXR2R1WldaeFlqRmtXSHB5YUZWaFZYVjZaRU5MVDNCd1ZIQTRJaXdpZDNJeFlXcHJOSHB4TTI1RlEzZERXRlJmYUZkc01XZHFURlZxZEVFeVpUWXlTM2htTVZwVmFsQnFRU0lzSW5wUlQxQTNlbmh4T1hScGMyaGxjV2RGVUUxaFEwVnlhbWRxWm1keGJVZ3pObGhzV1VOZmJsYzVlVFFpWFgwLnMxd0xBY1NlOUNEb29uTnBiTHpScHhvQmNoelB4NFpxUHJpYlpDYUhXN0JZaWh3X2NuRXFaRUlWMmVWbjNSdWRNdVhHMDRuYXdtZGRVaTBsUkgtbmRBfld5SnhhbkJVVDJ0RmRuWkdVMXB4UWtkWFRrSTJNSHBuSWl3aWMzTnVJaXdpTVRJek1UTXlNVE15TVRNaVhRfld5Sk5RVUZNVmpWWVpXY3pibTgzTm5OdFVIbDRlbEZSSWl3aVptRnRhV3g1WDI1aGJXVWlMQ0pFYjJVaVhRfld5SkRTa2RKT0hCNk4zWjJjR3BtZDIxWlQwUlNTbUZSSWl3aVoybDJaVzVmYm1GdFpTSXNJa3B2YUc0aVhRfld5SnphRWsxV1RCaE9XVTJkek40WmxWaVZWZFVOME5CSWl3aVltbHlkR2hmWkdGMFpTSXNJakU1T1RBdE1UQXRNVFZVTURBNk1EQTZNREF1TURBd1dpSmR+ZXlKMGVYQWlPaUpyWWl0cWQzUWlMQ0poYkdjaU9pSkZVekkxTmlKOS5leUp1YjI1alpTSTZJamt6WkRWak5EWTVMVEF4TjJFdE5HRmtOUzA0WVRSaExUa3dOR0V6TURKaU16VmxNeUlzSW1GMVpDSTZJblpsY21sbWFXVnlMbVZrYVhCc2IyMWhjeTVuY2lJc0luTmtYMmhoYzJnaU9pSlVkVEYwT1VveFluUTVXWEJ5UjFoVlZrbERPRE52ZHpFd1NubGpiRUp6UWtKRVFpMUZPV2RRUVZaVklpd2lhV0YwSWpveE56TTRNekl5T0Rjd2ZRLndydHRHcHpIQXBRWEFycnk1dTBITHNXa0xyYkljZXA4N21IQmxNSm81VlEzNV8yVGNrR2hHamJRZjFLOWJJRUJvZjR3OGVHSWo3b2kxS21SY1RHT1NB"
//	decoded, err := standardBase64Decode(encoded)
//	if err != nil {
//		fmt.Println("error:", err)
//	} else {
//		fmt.Println("Decoded:", decoded)
//	}
//}
//
////func TestDecodeString(t *testing.T) {
////	str := "eyJhbGciOiJSUzI1NiIsIng1YyI6WyJNSUlFQURDQ0F1aWdBd0lCQWdJVVFpVk9NVXllNS9OWGtUbWhnZ0RzS1hHNE9QZ3dEUVlKS29aSWh2Y05BUUVMQlFBd2NURUxNQWtHQTFVRUJoTUNSMUl4RHpBTkJnTlZCQWdNQmtGMGFHVnVjekVRTUE0R0ExVUVCd3dIU1d4c2FYTnBZVEVPTUF3R0ExVUVDZ3dGUjFWdVpYUXhFVEFQQmdOVkJBc01DRWxrWlc1MGFYUjVNUnd3R2dZRFZRUUREQk4zZDNkaGJHeGxkQzFsYm5SbGNuQnlhWE5sTUI0WERUSTBNRGt5T1RFMU5EZ3dPVm9YRFRJMU1Ea3lPVEUxTkRnd09Wb3djVEVMTUFrR0ExVUVCaE1DUjFJeER6QU5CZ05WQkFnTUJrRjBhR1Z1Y3pFUU1BNEdBMVVFQnd3SFNXeHNhWE5wWVRFT01Bd0dBMVVFQ2d3RlIxVnVaWFF4RVRBUEJnTlZCQXNNQ0Vsa1pXNTBhWFI1TVJ3d0dnWURWUVFEREJOM2QzZGhiR3hsZEMxbGJuUmxjbkJ5YVhObE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeDFJaHZEa1dYY2NackhKcjU0NC9rTG5WSXgzbDg1blgrcmxxRHpCWGVHdHFNRDVFWkV3YXNMU0JiMHRsQXlsZnVVU1BrNGFJcDBnTDhweUdET3NpdFJUWmtwNk5yL051OTgyTTV4bnk3N202NW1CcHFGQ0x0UlBvTU0vQlpJbzJ0YnBFY3FDU3Y5Z2RwTVhKRE9ldDV6UzcrT3NzVDRBdTZYYjJLazMwNDlFb2d0WjAyaGtFc3czRktqbzB4ZUR4cFRBNW1yaWI3Zzlod1RUOTcxdmlRSFZKUHdtYXk4ODNFemxtZm42KytLbllFNFY2eWNYZ3A1Q2Y3RFJZQVNmdTdYZkM3RXpqVHJ3ZGJzNFlJZjc0MGw3Q0lOejd6U2V1dEwrdWI3UnN4M0twQ0paM2p4Tzh4TDFhcnVubmsxZlZ1dUFjR3JZVjAwOWlkekUwWTJRSzl3SURBUUFCbzRHUE1JR01NR3NHQTFVZEVRUmtNR0tDSFhkaGJHeGxkQzFsYm5SbGNuQnlhWE5sTFdWb2FXTXRhWE56ZFdWeWdpQjNZV3hzWlhRdFpXNTBaWEp3Y21selpTMWthWEJzYjIxaExXbHpjM1ZsY29JZmQyRnNiR1YwTFdWdWRHVnljSEpwYzJVdFlXTnRaUzEyWlhKcFptbGxjakFkQmdOVkhRNEVGZ1FVKzhNODZORU51RSt4RnhWTnk5V3daNTFHNld3d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFMYTVmWUQzaU5PVDUrV29oeHVXNVM2WVk0czllVVBjMk1jbURYd2duczcrOE1McVpnWmNHbHQ0RTExWWpNa0VHK1VsajJPMkpOYmJnSlorRXluekNCNmIvMFdLVi91WjV4aE5hN3F3aitPdDNPTkdIZy9lUXVkOWZUd0N0YU5VSzRnaUlUZXRJSVhXQllNQUYrall4K3FkNUFWaWdMVXViZHo0S3ZKU05WOU04ZU93TmJFckVXMmt2TzBSS0thMThtMkZZbWhXUXRORG9odFlsMTlqVHA3TGtwa0NxUzNkQXZxb1hTbGdIaXlWYVpCOUo2NGZHOThORzFuUkhtVVpDaFhKTDVGTmxGS2VLc3R1Ulk0UkQwbVgrbENIUUlTc2dYVjRLK0xjWEdyNEpQTlBIdzZWSFM1akU0bll4bFkvT2FJV3Vzb0gxVXVESUYyeG5CamtSZ3c9Il19.eyJyZXNwb25zZV91cmkiOiJodHRwczovL3ZlcmlmaWVyLnd3d2FsbGV0Lm9yZy92ZXJpZmljYXRpb24vZGlyZWN0X3Bvc3QiLCJhdWQiOiJodHRwczovL3NlbGYtaXNzdWVkLm1lL3YyIiwiaXNzIjoidmVyaWZpZXIud3d3YWxsZXQub3JnIiwiY2xpZW50X2lkX3NjaGVtZSI6Ing1MDlfc2FuX2RucyIsImNsaWVudF9pZCI6InZlcmlmaWVyLnd3d2FsbGV0Lm9yZyIsInJlc3BvbnNlX3R5cGUiOiJ2cF90b2tlbiIsInJlc3BvbnNlX21vZGUiOiJkaXJlY3RfcG9zdC5qd3QiLCJzdGF0ZSI6IjJmOTZhMjRlLTkwY2MtNGIzMC1hOTA0LTkxMmU5OTgwZGYxMCIsIm5vbmNlIjoiZmVjMjVjYTItODAyZS00OTU0LWExMTQtNzdiNzVhZDU5MGYwIiwicHJlc2VudGF0aW9uX2RlZmluaXRpb24iOnsiaWQiOiJFdXJvcGVhbkhlYWx0aEluc3VyYW5jZUNhcmQiLCJ0aXRsZSI6IkV1cm9wZWFuIEhlYWx0aEluc3VyYW5jZSBDYXJkIiwiZGVzY3JpcHRpb24iOiJSZXF1aXJlZCBGaWVsZHM6IFZDIHR5cGUsIFNTTiwgRmFtaWx5IE5hbWUsIEdpdmVuIE5hbWUgJiBCaXJ0aCBEYXRlIiwiZm9ybWF0Ijp7InZjK3NkLWp3dCI6eyJhbGciOlsiRVMyNTYiXX19LCJpbnB1dF9kZXNjcmlwdG9ycyI6W3siaWQiOiJFdXJvcGVhbkhlYWx0aEluc3VyYW5jZUNhcmQiLCJmb3JtYXQiOnsidmMrc2Qtand0Ijp7ImFsZyI6WyJFUzI1NiJdfX0sImNvbnN0cmFpbnRzIjp7ImZpZWxkcyI6W3sibmFtZSI6IlZDIHR5cGUiLCJwYXRoIjpbIiQudmN0Il0sImZpbHRlciI6eyJ0eXBlIjoic3RyaW5nIiwiY29uc3QiOiJ1cm46Y3JlZGVudGlhbDplaGljIn19LHsibmFtZSI6IlNTTiIsInBhdGgiOlsiJC5zc24iXSwiZmlsdGVyIjp7fX0seyJuYW1lIjoiRmFtaWx5IE5hbWUiLCJwYXRoIjpbIiQuZmFtaWx5X25hbWUiXSwiZmlsdGVyIjp7fX0seyJuYW1lIjoiR2l2ZW4gTmFtZSIsInBhdGgiOlsiJC5naXZlbl9uYW1lIl0sImZpbHRlciI6e319LHsibmFtZSI6IkJpcnRoIERhdGUiLCJwYXRoIjpbIiQuYmlydGhfZGF0ZSJdLCJmaWx0ZXIiOnt9fV19fV19LCJjbGllbnRfbWV0YWRhdGEiOnsiandrcyI6eyJrZXlzIjpbeyJrdHkiOiJFQyIsIngiOiJXcUhGR0xMYVVIczc4alMtZk8zUkw3QkZmbk1oN1R0OV9QTXJXcklGVnVJIiwieSI6ImJocHJVZ0wxSThLRElPV0J3QW9vekxlZXdsZHpUaVJTY1A2aTNNOEJTdWsiLCJjcnYiOiJQLTI1NiIsImtpZCI6IjllYjg3ODUyYzQxZGRhZGUiLCJ1c2UiOiJlbmMifV19LCJhdXRob3JpemF0aW9uX2VuY3J5cHRlZF9yZXNwb25zZV9hbGciOiJFQ0RILUVTIiwiYXV0aG9yaXphdGlvbl9lbmNyeXB0ZWRfcmVzcG9uc2VfZW5jIjoiQTI1NkdDTSIsInZwX2Zvcm1hdHMiOnsidmMrc2Qtand0Ijp7InNkLWp3dF9hbGdfdmFsdWVzIjpbIkVTMjU2Il0sImtiLWp3dF9hbGdfdmFsdWVzIjpbIkVTMjU2Il19fX0sImlhdCI6MTc0MDkyMTMxNH0.SNrB3qgCK4TNHovLmdZJnYxLhx-6U4P8yzO13hO3e19sdtPvLr9CRKOVhokgRIauaTJmgH4UVT8oh-O72QRR6U6chMZDAZ7IMIXygM5vhO_DMIMnXm24hwVc3jjDDhHazyH-RtP0cPZvF819-gv1U9LsqdBrhoPaZ2OziWhCvYccZuJS94X54UnDSUbWRePzOcb1rUfwzTIQumLs7U11TtsJkxRJN803DgppkTtnCc1dnCV2FtG_XIYjsjTztrcNerebyWKi-33fbGS6mPiDApgfrMwY29ipTbfeFS5CflFoPe9XJSo2rBlBEFo6GEoFnXKZtKIdW7IvSrWSplgWLw"
////
////}
//
//func TestAuthorizationResponseWrapper_Process(t *testing.T) {
//	ecdsaP256Private, ecdsaP256Public, err := generateECDSAKeyPair(elliptic.P256())
//	if err != nil {
//		t.Fatal(err)
//	}
//	//vp_token_ehic_adam_driver, err := build_vp_jws_token_with_jwt_vc_credentials(ehic_sd_jwt_adam_driver, jwt.SigningMethodES256, ecdsaP256Private, "did:example:issuer#key-1")
//	vp_token_ehic_adam_driver, err := build_vp_jws_token_with_jwt_vc_credentials(acme_vc_sd_jwt_with_holder_binding, jwt.SigningMethodES256, ecdsaP256Private, "did:example:issuer#key-1")
//	if err != nil {
//		t.Fatal(err)
//	}
//
//	authorizationResponseWithJWSVPToken := buildAuthorizationResponse(vp_token_ehic_adam_driver)
//
//	vp_token_ehic_adam_driver_JWE, err := encryptToJWE([]byte(vp_token_ehic_adam_driver), ecdsaP256Public)
//	if err != nil {
//		t.Fatal(err)
//	}
//	authorizationResponseWithJWEVPToken := buildAuthorizationResponse(vp_token_ehic_adam_driver_JWE)
//
//	testCases := []struct {
//		name            string
//		as              AuthorizationResponse
//		holderPublicKey interface{}
//		jwePrivateKey   interface{}
//		issuerPublicKey interface{}
//		wantErr         bool
//	}{
//		{"AuthorizationResponse for adam driver with one jwt vc inside a jws vp_token", authorizationResponseWithJWSVPToken, ecdsaP256Public, nil, nil, false},
//		{"AuthorizationResponse for adam driver with one jwt vc that then encrypted in a jwe vp_token", authorizationResponseWithJWEVPToken, ecdsaP256Public, ecdsaP256Private, nil, false},
//		//{"AuthorizationResponse from Anna in ", arFromAnnasCLIWallet, nil, nil, nil, false},
//	}
//
//	for _, tc := range testCases {
//		t.Run(tc.name, func(t *testing.T) {
//			asw, err := NewAuthorizationResponseWrapper(&tc.as)
//			asw.holderPublicKey = tc.holderPublicKey
//			asw.jwePrivateKey = tc.jwePrivateKey
//			asw.issuerPublicKey = tc.issuerPublicKey
//			if err != nil {
//				t.Fatal(err)
//			}
//			processConfig := &ProcessConfig{
//				ProcessType: FULL_VALIDATION,
//				ValidationOptions: ValidationOptions{
//					SkipAllSignatureChecks: true,
//				},
//			}
//			err = asw.Process(processConfig)
//			if err != nil && !tc.wantErr {
//				t.Errorf("Process() error = %v, wantErr %v", err, tc.wantErr)
//			}
//			if err == nil && tc.wantErr {
//				t.Errorf("Process() error = nil, but want error")
//			}
//		})
//	}
//}
//
//func buildAuthorizationResponse(jwtVC string) AuthorizationResponse {
//	presentationSubmission := &PresentationSubmission{
//		ID:           "submission1",
//		DefinitionID: "vp-request-1",
//		DescriptorMap: []Descriptor{
//			{
//				ID:     "credential-1",
//				Format: "jwt_vc",
//				Path:   "$.vp_token[0].verifiablePresentation.verifiableCredential[0]",
//			},
//		},
//	}
//
//	authResponse := AuthorizationResponse{
//		VPTokens:               []VPTokenRaw{{JWT: jwtVC}},
//		PresentationSubmission: presentationSubmission,
//		State:                  "state123",
//	}
//
//	return authResponse
//}
//
//func TestVPToken_Process(t *testing.T) {
//	ecdsaP256Private, ecdsaP256Public, err := generateECDSAKeyPair(elliptic.P256())
//	if err != nil {
//		t.Fatal(err)
//	}
//
//	vp_token_ehic_adam_driver, err := build_vp_jws_token_with_jwt_vc_credentials(ehic_sd_jwt_adam_driver, jwt.SigningMethodES256, ecdsaP256Private, "did:example:issuer#key-1")
//	if err != nil {
//		t.Fatal(err)
//	}
//	vp_token_ehic_adam_driver_JWE, err := encryptToJWE([]byte(vp_token_ehic_adam_driver), ecdsaP256Public)
//	if err != nil {
//		t.Fatal(err)
//	}
//
//	vp_token_with_1_jwt_vc, err := build_vp_jws_token_with_jwt_vc_credentials(pid_sd_vc_jwt_with_selective_disclosures_and_holder_binding, jwt.SigningMethodES256, ecdsaP256Private, "did:example:issuer#key-1")
//	if err != nil {
//		t.Fatal(err)
//	}
//	vp_token_with_2_ldp_vc, err := build_vp_jws_token_with_ldp_vc_credentials(jwt.SigningMethodES256, ecdsaP256Private, "did:example:issuer#key-1")
//	if err != nil {
//		t.Fatal(err)
//	}
//
//	type fields struct {
//		RawToken string
//		//ValidationResults map[string]bool
//	}
//	tests := []struct {
//		name            string
//		fields          fields
//		holderPublicKey interface{}
//		jwePrivateKey   interface{}
//		issuerPublicKey interface{}
//		wantErr         bool
//	}{
//		//TODO bryt ut till till en testcase builder för att enkelt testa massa olika varianter
//		//{
//		//	name: "Sphereon vp_token",
//		//	fields: fields{
//		//		RawToken: sphereon_vp_token,
//		//	},
//		//	holderPublicKey: ecdsaP256Public,
//		//	jwePrivateKey:   ecdsaP256Private,
//		//	issuerPublicKey: ecdsaP256Public,
//		//	wantErr:         false,
//		//},
//		{
//			name: "Generated vp token ehic adam driver as JWE",
//			fields: fields{
//				RawToken: vp_token_ehic_adam_driver_JWE,
//			},
//			holderPublicKey: ecdsaP256Public,
//			jwePrivateKey:   ecdsaP256Private,
//			issuerPublicKey: ecdsaP256Public,
//			wantErr:         false,
//		},
//		{
//			name: "Generated vp token ehic adam driver",
//			fields: fields{
//				RawToken: vp_token_ehic_adam_driver,
//			},
//			holderPublicKey: ecdsaP256Public,
//			wantErr:         false,
//		},
//		{
//			name: "Generated vp token with 1 hardcoded jwt_vc (has wrong issuer)",
//			fields: fields{
//				RawToken: vp_token_with_1_jwt_vc,
//			},
//			holderPublicKey: ecdsaP256Public,
//			wantErr:         true,
//		},
//		{
//			name: "Generated vp token with 2 ldp_vc (format not supported yet)",
//			fields: fields{
//				RawToken: vp_token_with_2_ldp_vc,
//			},
//			holderPublicKey: ecdsaP256Public,
//			wantErr:         true,
//		},
//		{
//			name: "Hardcoded vp_token_1",
//			fields: fields{
//				RawToken: `eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJodHRwczovL3ZlcmlmaWVyLmV4YW1wbGUuY29tIiwiaXNzIjoiaHR0cHM6Ly93YWxsZXQuZXhhbXBsZS5jb20iLCJpYXQiOjE3MzgwNjU4OTksImV4cCI6MTczODE1MjI5OSwibm9uY2UiOiJyYW5kb21seS1nZW5lcmF0ZWQtbm9uY2UiLCJ2cCI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy9ucy9jcmVkZW50aWFscy9leGFtcGxlcy92MSJdLCJ0eXBlIjpbIlZlcmlmaWFibGVQcmVzZW50YXRpb24iXSwidmVyaWZpYWJsZUNyZWRlbnRpYWwiOlt7InR5cGUiOlsiVmVyaWZpYWJsZUNyZWRlbnRpYWwiLCJVbml2ZXJzaXR5RGVncmVlQ3JlZGVudGlhbCJdLCJjcmVkZW50aWFsU3ViamVjdCI6eyJnaXZlbl9uYW1lIjoiQWxpY2UiLCJmYW1pbHlfbmFtZSI6IkRvZSIsImRlZ3JlZSI6IkJhY2hlbG9yIG9mIFNjaWVuY2UgaW4gQ29tcHV0ZXIgU2NpZW5jZSJ9LCJwcm9vZiI6eyJ0eXBlIjoiRWQyNTUxOVNpZ25hdHVyZTIwMTgiLCJjcmVhdGVkIjoiMjAyNS0wMS0wMVQxMDowMDowMFoiLCJ2ZXJpZmljYXRpb25NZXRob2QiOiJodHRwczovL2V4YW1wbGUuY29tL2tleXMvMTIzIiwicHJvb2ZQdXJwb3NlIjoiYXNzZXJ0aW9uTWV0aG9kIiwiY2hhbGxlbmdlIjoicmFuZG9tLWNoYWxsZW5nZS12YWx1ZSIsImRvbWFpbiI6ImV4YW1wbGUuY29tIiwicHJvb2ZWYWx1ZSI6ImJhc2U2NHVybC1lbmNvZGVkLXByb29mLXZhbHVlIn19LHsidHlwZSI6WyJWZXJpZmlhYmxlQ3JlZGVudGlhbCIsIkRyaXZlckxpY2Vuc2UiXSwiY3JlZGVudGlhbFN1YmplY3QiOnsibmFtZSI6IkFsaWNlIERvZSIsImxpY2Vuc2VfbnVtYmVyIjoiMTIzNDU2NzgifSwicHJvb2YiOnsidHlwZSI6IkVkMjU1MTlTaWduYXR1cmUyMDE4IiwiY3JlYXRlZCI6IjIwMjUtMDEtMDFUMTE6MDA6MDBaIiwidmVyaWZpY2F0aW9uTWV0aG9kIjoiaHR0cHM6Ly9kbXYuZXhhbXBsZS5jb20va2V5cy80NTYiLCJwcm9vZlB1cnBvc2UiOiJhc3NlcnRpb25NZXRob2QiLCJjaGFsbGVuZ2UiOiJhbm90aGVyLWNoYWxsZW5nZS12YWx1ZSIsImRvbWFpbiI6ImRtdi5leGFtcGxlLmNvbSIsInByb29mVmFsdWUiOiJiYXNlNjR1cmwtZW5jb2RlZC1wcm9vZi12YWx1ZSJ9fV19fQ.UntYvN8d2A4nOffSKx7qa5A76Kn7uaCjpt0k8gRAXID7epFoSHlFZHNO5qJ8E-6kD3xYuoKp5uOYQr7Qpak0ZQ`,
//			},
//			wantErr: true,
//		},
//	}
//	for _, tt := range tests {
//		t.Run(tt.name, func(t *testing.T) {
//			vp, err := NewVerifiablePresentationWrapper(tt.fields.RawToken)
//			vp.holderPublicKey = tt.holderPublicKey
//			vp.jwePrivateKey = tt.jwePrivateKey
//			vp.issuerPublicKey = tt.issuerPublicKey
//			if err != nil {
//				t.Fatal(err)
//			}
//
//			if err := vp.Process(FULL_VALIDATION); (err != nil) != tt.wantErr {
//				t.Errorf("Validate() error = %v, wantErr %v", err, tt.wantErr)
//			}
//			//TODO lägg till asserts
//		})
//	}
//}
//
//func build_vp_jws_token_with_jwt_vc_credentials(vcJWT string, signingMethod jwt.SigningMethod, holderPublicKey interface{}, keyID string) (string, error) {
//	now := time.Now()
//
//	var vcList []string
//	if strings.TrimSpace(vcJWT) == "" {
//		vcList = []string{}
//	} else {
//		vcList = []string{vcJWT}
//	}
//
//	claims := jwt.MapClaims{
//		"iss": "did:example:myprivatewallet",
//		"aud": "did:example:sunetverifier",
//		"iat": now.Unix(),
//		"exp": now.Add(time.Minute * 5).Unix(),
//		"vp": map[string]interface{}{
//			"@context": []string{
//				"https://www.w3.org/2018/credentials/v1",
//				"https://w3id.org/security/v2",
//			},
//			"type":                 []string{"VerifiablePresentation"},
//			"verifiableCredential": vcList,
//		},
//		//TODO: presentation_submission ligger inte på denna nivån utan ska tas bort?
//		"presentation_submission": map[string]interface{}{
//			"id":            "ae1773e-3e19-4032-a1c2-a6b69087e5b2",
//			"definition_id": "vp_definition_1",
//			"descriptor_map": []map[string]interface{}{
//				{
//					"id":     "pid_input",
//					"path":   "$.vp.verifiableCredential[0]",
//					"format": "jwt_vc",
//				},
//			},
//		},
//	}
//
//	token := jwt.NewWithClaims(signingMethod, claims)
//	token.Header["kid"] = keyID
//	token.Header["typ"] = "JWS"
//
//	return signJWT(signingMethod, token, holderPublicKey)
//}
//
//func build_vp_jws_token_with_ldp_vc_credentials(signingMethod jwt.SigningMethod, holderPublicKey interface{}, keyID string) (string, error) {
//	now := time.Now()
//
//	claims := jwt.MapClaims{
//		"iss": "did:example:issuer",
//		"aud": "did:example:verifier",
//		"iat": now.Unix(),
//		"exp": now.Add(time.Minute * 5).Unix(),
//		"vp": map[string]interface{}{
//			"@context": []string{
//				"https://www.w3.org/2018/credentials/v1",
//				"https://w3id.org/security/v2",
//			},
//			"type": []string{"VerifiablePresentation"},
//			"verifiableCredential": []interface{}{
//				map[string]interface{}{
//					"@context": []string{
//						"https://www.w3.org/2018/credentials/v1",
//						"https://w3id.org/security/v2",
//					},
//					"id":           "urn:uuid:3978344f-8596-4c3a-a978-8fcaba3903c5",
//					"type":         []string{"VerifiableCredential", "UniversityDegreeCredential"},
//					"issuer":       "did:example:issuer",
//					"issuanceDate": "2020-03-10T04:24:12.164Z",
//					"credentialSubject": map[string]interface{}{
//						"id": "did:example:ebfeb1f712ebc6f1c276e12ec21",
//						"degree": map[string]interface{}{
//							"type": "BachelorDegree",
//							"name": "Bachelor of Science and Arts",
//						},
//					},
//					"proof": map[string]interface{}{
//						"type":               "Ed25519Signature2018",
//						"created":            "2023-01-29T08:00:00Z",
//						"verificationMethod": "did:example:issuer#key-1",
//						"jws":                "eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..",
//					},
//				},
//				map[string]interface{}{
//					"@context": []string{
//						"https://www.w3.org/2018/credentials/v1",
//						"https://w3id.org/security/v2",
//					},
//					"id":           "urn:uuid:d2760df0-c454-4b44-8795-85dda4e126c7",
//					"type":         []string{"VerifiableCredential", "DriverLicenseCredential"},
//					"issuer":       "did:example:issuer2",
//					"issuanceDate": "2022-01-01T00:00:00Z",
//					"credentialSubject": map[string]interface{}{
//						"id":         "did:example:ebfeb1f712ebc6f1c276e12ec21",
//						"givenName":  "Jane",
//						"familyName": "Doe",
//						"birthDate":  "1995-05-10",
//					},
//					"proof": map[string]interface{}{
//						"type":               "Ed25519Signature2018",
//						"created":            "2023-01-29T09:00:00Z",
//						"verificationMethod": "did:example:issuer2#key-1",
//						"jws":                "eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..",
//					},
//				},
//			},
//		},
//		"presentation_submission": map[string]interface{}{
//			"id":            "ae23773e-3e39-4032-a1c2-a6b69087e5b6",
//			"definition_id": "vp_definition_2",
//			"descriptor_map": []map[string]interface{}{
//				{
//					"id":     "degree_input",
//					"path":   "$.vp.verifiableCredential[0]",
//					"format": "ldp_vc",
//				},
//				{
//					"id":     "license_input",
//					"path":   "$.vp.verifiableCredential[1]",
//					"format": "ldp_vc",
//				},
//			},
//		},
//	}
//
//	token := jwt.NewWithClaims(signingMethod, claims)
//	token.Header["kid"] = keyID
//	token.Header["typ"] = "JWS"
//
//	return signJWT(signingMethod, token, holderPublicKey)
//}
//
//func signJWT(signingMethod jwt.SigningMethod, token *jwt.Token, holderPublicKey interface{}) (string, error) {
//	switch signingMethod.(type) {
//	case *jwt.SigningMethodECDSA:
//		return token.SignedString(holderPublicKey.(*ecdsa.PrivateKey))
//	case *jwt.SigningMethodRSA, *jwt.SigningMethodRSAPSS:
//		return token.SignedString(holderPublicKey.(*rsa.PrivateKey))
//	case *jwt.SigningMethodEd25519:
//		return token.SignedString(holderPublicKey.(ed25519.PrivateKey))
//	case *jwt.SigningMethodHMAC:
//		return token.SignedString(holderPublicKey.([]byte))
//	default:
//		return "", fmt.Errorf("unknown signingmethod")
//	}
//}
//
//func generateECDSAKeyPair(curve elliptic.Curve) (*ecdsa.PrivateKey, *ecdsa.PublicKey, error) {
//	privateKey, err := ecdsa.GenerateKey(curve, rand.Reader)
//	if err != nil {
//		return nil, nil, err
//	}
//	return privateKey, &privateKey.PublicKey, nil
//}
//
//func generateECDSAKeyPairSecp256k1() (*ecdsa.PrivateKey, *ecdsa.PublicKey, error) {
//	privateKey, err := crypto.GenerateKey()
//	if err != nil {
//		return nil, nil, err
//	}
//	return privateKey, &privateKey.PublicKey, nil
//}
//
//func generateRSAKeyPair(bits int) (*rsa.PrivateKey, *rsa.PublicKey, error) {
//	privateKey, err := rsa.GenerateKey(rand.Reader, bits)
//	if err != nil {
//		return nil, nil, err
//	}
//	return privateKey, &privateKey.PublicKey, nil
//}
//
//func generateEdDSAKeyPair() (ed25519.PrivateKey, ed25519.PublicKey, error) {
//	publicKey, privateKey, err := ed25519.GenerateKey(rand.Reader)
//	if err != nil {
//		return nil, nil, err
//	}
//	return privateKey, publicKey, nil
//}
//
//func generateHMACKey() ([]byte, error) {
//	hmacKey := make([]byte, 32) // 256-bit HMAC-nyckel
//	_, err := rand.Read(hmacKey)
//	if err != nil {
//		return nil, err
//	}
//	return hmacKey, nil
//}
//
//func encryptToJWE(jwtString []byte, publicKey *ecdsa.PublicKey) (string, error) {
//	encrypter, err := jose.NewEncrypter(
//		jose.A256GCM, // content encryption alg
//		jose.Recipient{
//			Algorithm: jose.ECDH_ES_A256KW, // key encryption
//			Key:       publicKey,
//		},
//		&jose.EncrypterOptions{
//			Compression: jose.DEFLATE,
//		},
//	)
//	if err != nil {
//		return "", fmt.Errorf("Failed to create JWE encrypter: %w", err)
//	}
//
//	jwe, err := encrypter.Encrypt(jwtString)
//	if err != nil {
//		return "", fmt.Errorf("Failed to encrypt JWT to JWE: %w", err)
//	}
//
//	return jwe.CompactSerialize()
//}
//
///* Below is a readable form for vp_token_1 in the test:
//{
//  "header": {
//	"alg": "ES256",
//	"typ": "JWT"
//  },
//  "payload": {
//	"aud": "https://verifier.example.com",
//	"iss": "https://wallet.example.com",
//	"iat": 1738065899,
//	"exp": 1738152299,
//	"nonce": "randomly-generated-nonce",
//	"vp": {
//	  "@context": [
//		"https://www.w3.org/2018/credentials/v1",
//		"https://www.w3.org/ns/credentials/examples/v1"
//	  ],
//	  "type": ["VerifiablePresentation"],
//	  "verifiableCredential": [
//		{
//		  "type": ["VerifiableCredential", "UniversityDegreeCredential"],
//		  "credentialSubject": {
//			"given_name": "Alice",
//			"family_name": "Doe",
//			"degree": "Bachelor of Science in Computer Science"
//		  },
//		  "proof": {
//			"type": "Ed25519Signature2018",
//			"created": "2025-01-01T10:00:00Z",
//			"verificationMethod": "https://example.com/keys/123",
//			"proofPurpose": "assertionMethod",
//			"challenge": "random-challenge-value",
//			"domain": "example.com",
//			"proofValue": "base64url-encoded-proof-value"
//		  }
//		},
//		{
//		  "type": ["VerifiableCredential", "DriverLicense"],
//		  "credentialSubject": {
//			"name": "Alice Doe",
//			"license_number": "12345678"
//		  },
//		  "proof": {
//			"type": "Ed25519Signature2018",
//			"created": "2025-01-01T11:00:00Z",
//			"verificationMethod": "https://dmv.example.com/keys/456",
//			"proofPurpose": "assertionMethod",
//			"challenge": "another-challenge-value",
//			"domain": "dmv.example.com",
//			"proofValue": "base64url-encoded-proof-value"
//		  }
//		}
//	  ]
//	}
//  }
//}
//*/
