package httpserver

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"net/url"
	"strings"
	"testing"
	"vc/pkg/openid4vp"
)

var walletResponse1BodyMedJWE string = ""

var walletResponseBody2SomNogInteIsJWE = "dnBfdG9rZW49ZXlKaGJHY2lPaUpGVXpJMU5pSXNJbXRwWkNJNkltUmxabUYxYkhSZmMybG5ibWx1WjE5clpYbGZhV1FpTENKMGVYQWlPaUoyWXl0elpDMXFkM1FpTENKMlkzUnRJanBiSW1WNVNqSlpNMUZwVDJsS1JsTkZiRVJSTTBwc1drZFdkV1JIYkdoaVEwbHpTVzAxYUdKWFZXbFBhVXBHVTBWc1JFbHBkMmxhUjFaNldUTktjR05JVW5CaU1qUnBUMmxLVldGSGJIcEpSMng2U1VkR2RVbEZWa2xUVlUxbldrYzVhbVJYTVd4aWJsRm5ZVmhPZW1SWFZtdEpSMG8xU1VoU2IxcFRRak5hVjNoelNVZDBkV0l6WkhWSlJWWkpVMVZOWjFOWVRucGtWMVo1U1dsM2FWcEhiSHBqUjNob1pWTkpObGN6YzJsaVIwWjFXbmxKTmtsdFZuVk1WbFpVU1dsM2FXSnRSblJhVTBrMlNXdFdTVk5WVFdsTVEwcDVXbGMxYTFwWVNuQmliV05wVDI1emFXTXliSFJqUjNoc1NXcHdOMGx0ZUhaYU1qaHBUMjV6YVdSWVNuQkphbTlwWVVoU01HTklUVFpNZVRsNVdWaGpkVm95YkRCaFNGWnBaRmhPYkdOdFRuWmlibEpzWW01UmRWa3lPWFJNTWxKcVRrZFdNVXd6V21wTWVtczBUWHBLYVZscVVUVk9SMVpxV2tSck5FMXRUWHBaVjBVeFRtMVdhMDFYU1RGTlJGSnNUVEpGTkU5RVVtdE9SRnByVFdwTmRtRlhNV2hhTWxaNlRESldiMkZYVG1wWldFcHJURzVDZFZwNVNYTkpibFo1WVZOT2NHSnVVbXhhTTBwd1pFaHJhVTlwU25waFIwVjVUbFJaZEUxVVNUQlplbFp0V2xkRmVFNUVhR3RPVkZreFRXcGthVmxYUlROT2Vra3hUMVJyTUUxdFNUSmFWMVV4VFVSVmQxcFVXWHBPVjA1cVQwUmFhazFxV1RSYWJWRXdUV3BWTkU0eVVYZE5ha3BvVG1wc2FrNTVTWE5KYlVaelpFWTVNRnBZYURCSmFtOXBVbFZvU2xGNVFrUlpXRXByU1c0d2MwbHRTbWhaTW5SdVkyMDVNV0p0VW1aWk1qbHpZak5KYVU5cFNXcE5WRWw0VFVSa2FrbHBkMmxrUjFZMFpFWTVhbUl5ZUhaamFVazJTV2xPUjFKcldrZFNhMWxwWmxOM2FXTXpXbTVZTTFKc1lsaENjMWxZVW14amVVazJWek56YVdSWVNuQkphbTlwWVVoU01HTklUVFpNZVRsNVdWaGpkVm95YkRCaFNGWnBaRmhPYkdOdFRuWmlibEpzWW01UmRWa3lPWFJNTWxKcVRrZFdNVXd6V21wTWVtczBUWHBLYVZscVVUVk9SMVpxV2tSck5FMXRUWHBaVjBVeFRtMVdhMDFYU1RGTlJGSnNUVEpGTkU5RVVtdE9SRnByVFdwTmRtRlhNV2hhTWxaNlRESldiMkZYVGxWYVZ6RjNZa2RHTUZwVE5YcGtiV05wVEVOS01XTnRhMnBoVnpVd1dsZGtlV0ZZVWpWSmFtOXBZekpvYUUxcVZUSk1WMDAxVFVSbk5Wa3lTWGxaZW1ocFQwUlJNVmxVV1RWUFZHTTBXVEpOTlZsWFVtcE5iVkV4VFRKTk5FOUVTWGRPTWxaclRsZEZNVTlFV1hwUFZHeHBUMWRHYkZwSFZUUmFWRVpvVDFST2FscEVUWGRPVjBWcFRFTktkMk50T1hkYVdFb3dZVmRXZWtscWNEZEpiVGw1WVZkV2RXUkhSakJoVnpsMVNXcHZhVWxwZDJsWk1qbHpZak5LWm1NeVRtOWFWekZzU1dwdmFVbHBkMmxaTWpsMVpFaEthR016VVdsUGFVbHBabGd4WkdaWU1XUk1RMHBxWWtkR2NHSllUV2xQYkhRM1NXNUNhR1JIWjJsUGJITnBZekk1YW1GWFJuTllNMDVzV1ROV2VXRllValZZTTBKd1ltbEtaRXhEU210aFdFNTNZa2RHTlVscWNHSmxlVXB6V1ZjMWJrbHFiMmxhVnpSMFZsWk5hVXhEU25OWlYwcHNZa05KTmtsc1RuWlpNbXhvWWtOQ1ZGcFhUakZqYld3d1pWTkNUMlJYTVdsYVdFbHBURU5LYTFwWVRtcGpiV3gzWkVkc2RtSnBTVFpKYkZKdldsTkNlbUl5VG5CWlYzZG5ZekpXYW1SWVNuQmtTR3RuWW01V2RGbHRWbmxKUnpsdFNVaFNiMXBUUWtaVFJXeEVTVWRvZG1KSFVteGphVW81V0ZOM2FXTXlVV2xQYVVscFRFTktlbVJ0WkdaaFYxRnBUMmxLZW1JeVRuQlpWM2htWXpKV2FtUllTbkJrU0d4bVkwZHNkVWx1TUhObGVVcDNXVmhTYjBscWNHSkpiVTUyWWxoQ2JHUkhWblZrUmpsd1ltNU9NR0ZZVWpGa1IyeDJZbWxKYzBsdGJIVmpNMUp3WkVoV01HRlhPWFZZTWs1MlpGYzFNR051YTJsWVUzZHBXa2RzZW1OSGVHaGxVMGsyVnpOemFXSkhSblZhZVVrMlNXMVdkVXhXVmxSSmFYZHBZa2RHYVZwWGQybFBhVXBLWXpOT01WcFlTV2RSTWpreFltNVNlV1ZUU1hOSmJWSnNZekpPZVdGWVFqQmhWemwxU1dwdmFWWkhhR3hKUjJ4Nll6TldiR05wUW1waU0xWjFaRWhLTlVsSE9XMUpTRkp2V2xOQ1JsTkZiRVJKUjJoMllrZFNiR05wU2psWVUzZHBZekpSYVU5cFNXbE1RMHA2Wkcxa1ptRlhVV2xQYVVwd1l6Tk9NVnBZU21aWk1qa3hZbTVTZVdWVFNqbE1TSE5wWTBkR01HRkRTVFpYZVVwcVlqSXhkMXBZVW14aWJsSm1ZVmMxZW1SSGJEQmtXRkp3WWpJMGFVeERTbkJpYms0d1lWaFNNV1JIYkhaaWJEbHdXa05LWkV4RFNtdGhXRTUzWWtkR05VbHFjR0psZVVweldWYzFia2xxYjJsYVZ6UjBWbFpOYVV4RFNuTlpWMHBzWWtOSk5rbHJiSHBqTTFac1kybENTbUp1VGpCaFdGSXhaRWRzZG1KcFFrUmlNbEpzU1dsM2FWcEhWbnBaTTBwd1kwaFNjR0l5TkdsUGFVcFZZVWRWWjJGWVRucGtWMVo1U1Vkc2RXTXpVbkJrU0ZZd1lWYzVkVWxIVG5aYVIxVm5ZakpaWjJSSGFHeEpSVlpKVTFWTloyRkhPWE5hUjFaNVNXNHhaRXhEU25wYVEwazJTV2xKYzBsdVRqSmFNVGx3V2tOSk5rbHRiSHBqTTFac1kydzVjR0p1VGpCaFdGSXhaRWRzZG1Kc09XcGlNbEpzU1c0d2MyVjVTbmRaV0ZKdlNXcHdZa2x0VW5aWk0xWjBXbGMxTUZneWJHdEpiREJ6U1cxU2NHTXpRbk5aV0d0cFQyeDBOMGx0ZUdoaWJXTnBUMmxLYkdKcE1WWlZlVWx6U1cxNGFGbHRWbk5KYW05cFUxZFNiR0p1VW5CYWJXeHFXVmhTY0dJeU5HZFpNa1o1V2tOQ2RXUlhNV2xhV0VscFRFTkthMXBZVG1wamJXeDNaRWRzZG1KcFNUWkpiRkp2V2xOQ1NscEhWblZrUjJ4dFlWZE9hR1JIYkhaaWFVSnFXVmhLYTBsSE5URmlWMHBzWTJsQ2RscHBRakJoUjFWblVsVm9TbEY1UW05aU1uaHJXbGhKYVdaV01ITkpiazVyU1dwdmFVbHBkMmxqTTFwdVdESnNhMGxxYjJsaFYxSnNZbTVTY0ZwdGJHcFpXRkp3WWpJMVptSnVWblJaYlZaNVdESk9hR050VVdsbVUzZzNTVzVDYUdSSFoybFBiSE5wWTBkV2VXRlhPV3RZTWxaMVpFZHNNR0pIVm5SYVZ6VXdTV2wzYVZwWE5XdGhWelZ1V0RKU2FHUkhWV2xZVTNkcFdrZHNlbU5IZUdobFUwazJWek56YVdKSFJuVmFlVWsyU1cxV2RVeFdWbFJKYVhkcFlrZEdhVnBYZDJsUGFVcEdaVWhDY0dOdWEyZFNSMFl3V2xOSmMwbHRVbXhqTWs1NVlWaENNR0ZYT1hWSmFtOXBWa2RvYkVsSFVtaGtSMVZuV1ZjMWEwbElVbkJpVjFWbldsaG9kMkZZU214YVEwSXdZVWRzZWtsSFRubGFWMUpzWW01U2NGbFhkMmxtVmpCelNXNU9hMGxxYjJsSmFYZHBZek5hYmxneWJHdEphbTlwV2xob2QyRllTalZZTWxKb1pFZFZhV1pXTUhOSmJrNXFZVWRXZEZsV09URmpiWGRwVDJsSmFVeERTbnBaTW1oc1lsZEdabVJZU25OSk1teDFaRWRXYm1OdGJEQmxVMGsyU1dsSmMwbHRWalJrUjFaMVdraE5hVTlwU1dsTVEwcHNaVWhTYkdKdFVucEpNbXgxWkVkV2JtTnRiREJsVTBrMlNXbEtPU0pkZlEuZXlKZmMyUWlPbHNpTkdoMVpUTnVabkpFYVRoUk55MVBaM05sUlVadVNsWmtiM2w1V21nM04xaHVVSFkxU1ZWcGRtWnBXU0lzSWxJMGRIbENRbGhDUVhoYVluWnFUSE5wV2kwd2JGRjVOVzVHZGtkZmVsTk1kM0F4VmtNelVqTmthMUVpTENKYVN6Vm5SMmt0WW5OV1FYTnVNVXRqYlhCeVRsOWxSbDluZERGRmRsSTJaM015WWxKb01uRXllV0pOSWl3aVRWY3dRMmxZVTFoNGNVdzRhRVIzV0RscFVWSmFRM2gyU1hWSllrRnNZVlV6TFZCdVZYSTBVM294TUNJc0lqTmxibm8zVlRKeloycFJaalV3T0VFeWVIZDBNRkZsUmpjek0xVTRiVzVOTkVKWmJUbE1kbXR0UTJzaVhTd2lYM05rWDJGc1p5STZJbk5vWVMweU5UWWlMQ0pqYm1ZaU9uc2lhbmRySWpwN0ltTnlkaUk2SWxBdE1qVTJJaXdpYTNSNUlqb2lSVU1pTENKNElqb2lNRGxFTTFGTlExWTJWWFphZG5BNVF6UlpNekowUVVGWVYyVldZVkY2WjNCdVFYZGhaRzVtVmtab1NTSXNJbmtpT2lKSU5qSm9lRzlZUVdwVVQxVXlSR3RKTmtSdmJtcDVUVnBVTm5vM1Z6TndaVzV6WlVSVVlXSlhkVlp6SW4xOUxDSmxlSEFpT2pFM056VXhNelUzTVRnc0ltbHpjeUk2SW1oMGRIQnpPaTh2YzJGMGIzTmhMWFJsYzNRdE1TNXpkVzVsZEM1elpTSXNJbTVpWmlJNk1UYzBNelU1T1RjeE9Dd2lkbU4wSWpvaVJVaEpRME55WldSbGJuUnBZV3dpZlEudlJxeWJoX0UzbnZTMnp6VU5GZGNZN3djY21tck96RDdhOENFSFVudlBwaWFKWmNURF9DcXVKUWJiZnhDVnhnOHZBUDE5LTNnNkZqYXJhWWpVRUk4VlElN0VXeUpsU0dsamIyTldlSE0wVFVwclVHbEdXa0UzVFVKQklpd2ljM1ZpYW1WamRDSXNleUprWVhSbFgyOW1YMkpwY25Sb0lqb2lNVGs0Tmkwd05pMHhPU0lzSW1aaGJXbHNlVjl1WVcxbElqb2lWMmx1YzJ4bGRDSXNJbVp2Y21WdVlXMWxJam9pUzJGMFpTSjlYUSU3RVd5SlpUa2hWV0Zac1puQXphRW94YWxka1JFSXhaV1ZCSWl3aWMyOWphV0ZzWDNObFkzVnlhWFI1WDNCcGJpSXNJalUyTnpnek5Ea3dJbDAlN0VXeUkwU2xwV1JUbE1aa0ZaYWw4NGVrVk1iM05aYWpCQklpd2laRzlqZFcxbGJuUmZhV1FpTENJM09Ea3dNVEl6TkRVMk56ZzVNREV5TXpRMU5pSmQlN0VXeUoxVWpOMGFIbEtXVFZxZFhaR1NGTlliR3ByVUUxM0lpd2lZMjl0Y0dWMFpXNTBYMmx1YzNScGRIVjBhVzl1SWl4N0ltbHVjM1JwZEhWMGFXOXVYMk52ZFc1MGNua2lPaUpHVWlJc0ltbHVjM1JwZEhWMGFXOXVYMmxrSWpvaVEweEZTVk5USWl3aWFXNXpkR2wwZFhScGIyNWZibUZ0WlNJNklrZHliM1Z3WlNCRFlXbHpjMlVnWkdWeklFVERxWEREdEhSeklHRnpjMmx6ZEdWa0lHSjVJSFJvWlNCRFpXNTBjbVVnYjJZZ1JYVnliM0JsWVc0Z1lXNWtJRWx1ZEdWeWJtRjBhVzl1WVd3Z1RHbGhhWE52Ym5NZ1ptOXlJRk52WTJsaGJDQlRaV04xY21sMGVTSjlYUSU3RWV5SjBlWEFpT2lKcllpdHFkM1FpTENKaGJHY2lPaUpGVXpJMU5pSjkuZXlKdWIyNWpaU0k2SWtWTWFDMTVMVXBvV2pkeGVHWXljbEJyU0hveVQyTlZjMnhNV0habVZ6VnFNMXA1ZFU5eVUyTm1iVzhpTENKaGRXUWlPaUoyWXkxcGJuUmxjbTl3TFRNdWMzVnVaWFF1YzJVaUxDSnpaRjlvWVhOb0lqb2libVp4ZEhsTVJVUlhlbWRWUmxoV2RUZDVjblV0U25GU1MxSk1iazVPZG5jNWJVcFNNVlIwVmxCblRTSXNJbWxoZENJNk1UYzBORGd3TWpNek1IMC5DVXJjNUtlLVdLdks0a0pHZVdtUUdsSkJXSVJwTTRuYlNoS2x5TlJhZzVvY2Z4X1VCdHBDNmN2YS1LV2dOYnQyanlydUFUVVpwdldGVXJxd3NwQkZ3USZwcmVzZW50YXRpb25fc3VibWlzc2lvbj0lN0IlMjJpZCUyMiUzQSUyMmZjOTEyMzA3YTZiOTFhMDUlMjIlMkMlMjJkZWZpbml0aW9uX2lkJTIyJTNBJTIyU2F0b3NhRXVyb3BlYW5IZWFsdGhJbnN1cmFuY2VDYXJkJTIyJTJDJTIyZGVzY3JpcHRvcl9tYXAlMjIlM0ElNUIlN0IlMjJpZCUyMiUzQSUyMlNhdG9zYUVISUMlMjIlMkMlMjJmb3JtYXQlMjIlM0ElMjJ2YyUyQnNkLWp3dCUyMiUyQyUyMnBhdGglMjIlM0ElMjIlMjQlMjIlN0QlNUQlN0Qmc3RhdGU9NDMwOTQwOTgtOTQ5OC00ZDU1LWIwMjctNDI3NDdkNWIyMmMy"

func TestService_endpointCallback(t *testing.T) {
	fmt.Println("Start")
	//TODO: nedan kan i metoden toResponseBody läsa ut innehållet före det blir fel
	//responseBody, err := toResponseBody(walletResponseBody2SomNogInteIsJWE)
	//if err != nil {
	//	fmt.Println(err)
	//} else {
	//	fmt.Println("JWE=", responseBody.Response)
	//}

	ar, err := toAuthorizationResponseBody(walletResponseBody2SomNogInteIsJWE)
	if err != nil {
		fmt.Println(err)
	}

	fmt.Println("JWE=", ar)
}

func toAuthorizationResponseBody(encodedBody string) (*openid4vp.AuthorizationResponse, error) {
	padded := encodedBody + strings.Repeat("=", (4-len(encodedBody)%4)%4)

	decodedBytes, err := base64.StdEncoding.DecodeString(padded)
	if err != nil {
		return nil, fmt.Errorf("base64 decode failed: %w", err)
	}
	fmt.Println("### DECODED BYTES:", string(decodedBytes))

	values, err := url.ParseQuery(string(decodedBytes))
	if err != nil {
		return nil, fmt.Errorf("url parse failed: %w", err)
	}
	fmt.Println("### VALUES FROM PARSED QUERY:", values)

	var p openid4vp.AuthorizationResponse
	err = json.Unmarshal(decodedBytes, &p)
	if err != nil {
		log.Fatalf("Failed to unmarshal: %v", err)
	}
	return &p, nil

	//return &openid4vp.AuthorizationResponse{}, nil
}

func toResponseBody(encodedBody string) (*ResponseBody, error) {
	padded := encodedBody + strings.Repeat("=", (4-len(encodedBody)%4)%4)

	decodedBytes, err := base64.StdEncoding.DecodeString(padded)
	if err != nil {
		return nil, fmt.Errorf("base64 decode failed: %w", err)
	}

	values, err := url.ParseQuery(string(decodedBytes))
	if err != nil {
		return nil, fmt.Errorf("url parse failed: %w", err)
	}

	return &ResponseBody{
		Response: values.Get("response"),
	}, nil
}
