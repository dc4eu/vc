package apiv1

import (
	"context"
	"errors"
	"slices"
	"vc/internal/gen/registry/apiv1_registry"
	"vc/pkg/helpers"
	"vc/pkg/oauth2"
	"vc/pkg/openid4vci"

	"github.com/golang-jwt/jwt/v5"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

// OIDCCredentialOffer https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#name-credential-offer-endpoint
func (c *Client) OIDCCredentialOffer(ctx context.Context, req *openid4vci.CredentialOfferParameters) (*openid4vci.CredentialOfferParameters, error) {
	c.log.Debug("credential offer")
	return nil, nil
}

// OIDCNonce https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#name-nonce-endpoint
func (c *Client) OIDCNonce(ctx context.Context) (*openid4vci.NonceResponse, error) {
	nonce, err := openid4vci.GenerateNonce(0)
	if err != nil {
		return nil, err
	}
	response := &openid4vci.NonceResponse{
		CNonce: nonce,
	}
	return response, nil
}

// OIDCCredential makes a credential
//
//	@Summary		OIDCCredential
//	@ID				create-credential
//	@Description	Create credential endpoint
//	@Tags			dc4eu
//	@Accept			json
//	@Produce		json
//	@Success		200	{object}	apiv1_issuer.MakeSDJWTReply	"Success"
//	@Failure		400	{object}	helpers.ErrorResponse		"Bad Request"
//	@Param			req	body		openid4vci.CredentialRequest			true	" "
//	@Router			/credential [post]
func (c *Client) OIDCCredential(ctx context.Context, req *openid4vci.CredentialRequest) (*openid4vci.CredentialResponse, error) {
	c.log.Debug("credential", "req", req)

	dpop, err := oauth2.ValidateAndParseDPoPJWT(req.Headers.DPoP)
	if err != nil {
		c.log.Error(err, "failed to validate DPoP JWT")
		return nil, err
	}

	requestATH := req.Headers.HashAuthorizeToken()

	if !dpop.IsAccessTokenDPoP(requestATH) {
		return nil, errors.New("invalid DPoP token")

	}

	if slices.Contains(c.cfg.Common.SupportedPidVCT, req.VCT) {
		// pid flow
	} else {
		// non-pid flow
	}
	response := &openid4vci.CredentialResponse{
		Credential:      "eyJhbGciOiJFUzI1NiIsImtpZCI6ImRlZmF1bHRfc2lnbmluZ19rZXlfaWQiLCJ0eXAiOiJ2YytzZC1qd3QiLCJ2Y3RtIjpbImV5SjJZM1FpT2lKRWFYQnNiMjFoUTNKbFpHVnVkR2xoYkNJc0ltNWhiV1VpT2lKRWFYQnNiMjFoSUVOeVpXUmxiblJwWVd3aUxDSmtaWE5qY21sd2RHbHZiaUk2SWtWMWNtOXdaV0Z1SUV4bFlYSnVhVzVuSUUxdlpHVnNJRVJwY0d4dmJXRWdRM0psWkdWdWRHbGhiQzRpTENJa1kyOXRiV1Z1ZENJNklpSXNJbVJwYzNCc1lYa2lPbHQ3SW14aGJtY2lPaUpsYmkxVlV5SXNJbTVoYldVaU9pSkVhWEJzYjIxaElFTnlaV1JsYm5ScFlXd2lMQ0prWlhOamNtbHdkR2x2YmlJNklsQnZjblJoWW14bElFVjFjbTl3WldGdUlFeGxZWEp1YVc1bklFMXZaR1ZzSUNoRlRFMHBJRVJwY0d4dmJXRWdRM0psWkdWdWRHbGhiQzRpTENKeVpXNWtaWEpwYm1jaU9uc2ljMmx0Y0d4bElqcDdJbXh2WjI4aU9uc2lkWEpwSWpvaUlpd2lkWEpwSTJsdWRHVm5jbWwwZVNJNklpSXNJbUZzZEY5MFpYaDBJam9pSW4wc0ltSmhZMnRuY205MWJtUmZZMjlzYjNJaU9pSWlMQ0owWlhoMFgyTnZiRzl5SWpvaUluMHNJbk4yWjE5MFpXMXdiR0YwWlhNaU9sdDdJblZ5YVNJNkltaDBkSEJ6T2k4dmNtRjNMbWRwZEdoMVluVnpaWEpqYjI1MFpXNTBMbU52YlM5a1l6UmxkUzkyWXk4Mk16TTVOREJpTUdJd01HRmlNalU1WVdZd01XTm1ZbVptT1RVNFpqRm1abVZpWmpVeE56WmhMMmx0WVdkbGN5OWthWEJzYjIxaFZHVnRjR3hoZEdVdWMzWm5JaXdpZFhKcEkybHVkR1ZuY21sMGVTSTZJbk5vWVRJMU5pMHhZV05rTkRnNE16Z3lObUZpWVRBek1UaGtNakU1TWpFelltSTNOV0U1Wkdaak9EVTRaamt5Tm1VNU0yWTFOell5TWpRME1USXpNREZtWlRNd01UaGhJaXdpY0hKdmNHVnlkR2xsY3lJNmV5SnZjbWxsYm5SaGRHbHZiaUk2SWlJc0ltTnZiRzl5WDNOamFHVnRaU0k2SWlJc0ltTnZiblJ5WVhOMElqb2lJbjE5WFgxOVhTd2lZMnhoYVcxeklqcGJYU3dpYzJOb1pXMWhYM1Z5YkNJNklpSXNJbk5qYUdWdFlWOTFjbXdqYVc1MFpXZHlhWFI1SWpvaUlpd2laWGgwWlc1a2N5STZJaUlzSW1WNGRHVnVaSE1qYVc1MFpXZHlhWFI1SWpvaUluMD0iXX0..LjeOPoP0FFqZnZBbypSxM5NUoy_O0Khpidd2Qj4vyQLWDUjuv_CQ-jwQoQjUT-cTWU0hnTxd7JYQgPlGxX__-A~",
		TransactionID:   "",
		CNonce:          "",
		CNonceExpiresIn: 0,
		NotificationID:  "",
	}

	return response, nil
}

// OIDCDeferredCredential https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#name-deferred-credential-endpoin
func (c *Client) OIDCDeferredCredential(ctx context.Context, req *openid4vci.DeferredCredentialRequest) (*openid4vci.CredentialResponse, error) {
	c.log.Debug("deferred credential", "req", req)
	// run the same code as OIDCCredential
	return nil, nil
}

// OIDCredentialOfferURI https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0-14.html#name-sending-credential-offer-by-
func (c *Client) OIDCredentialOfferURI(ctx context.Context, req *openid4vci.CredentialOfferURIRequest) (*openid4vci.CredentialOfferParameters, error) {
	c.log.Debug("credential offer uri", "req", req.CredentialOfferUUID)
	doc, err := c.db.VCCredentialOfferColl.Get(ctx, req.CredentialOfferUUID)
	if err != nil {
		c.log.Debug("failed to marshal document data", "error", err)
		return nil, err
	}

	return &doc.CredentialOfferParameters, nil
}

// OIDCNotification https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#name-notification-endpoint
func (c *Client) OIDCNotification(ctx context.Context, req *openid4vci.NotificationRequest) error {
	c.log.Debug("notification", "req", req)
	return nil
}

// OIDCMetadata https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0-ID1.html#name-credential-issuer-metadata-
func (c *Client) OIDCMetadata(ctx context.Context) (*openid4vci.CredentialIssuerMetadataParameters, error) {
	c.log.Debug("metadata request")

	signedMetadata, err := c.issuerMetadata.Sign(jwt.SigningMethodRS256, c.issuerMetadataSigningKey, c.issuerMetadataSigningChain)
	if err != nil {
		return nil, err
	}
	if err := helpers.Check(ctx, c.cfg, signedMetadata, c.log); err != nil {
		c.log.Error(err, "failed to check metadata")
		return nil, err
	}

	return signedMetadata, nil
}

// RevokeRequest is the request for GenericRevoke
type RevokeRequest struct {
	AuthenticSource string `json:"authentic_source"`
	DocumentType    string `json:"document_type"`
	DocumentID      string `json:"document_id"`
	RevocationID    string `json:"revocation_id"`
}

// RevokeReply is the reply for GenericRevoke
type RevokeReply struct {
	Data struct {
		Status bool `json:"status"`
	}
}

// Revoke revokes a document
//
//	@Summary		Revoke
//	@ID				generic-revoke
//	@Description	Revoke endpoint
//	@Tags			dc4eu
//	@Accept			json
//	@Produce		json
//	@Success		200	{object}	RevokeReply				"Success"
//	@Failure		400	{object}	helpers.ErrorResponse	"Bad Request"
//	@Param			req	body		RevokeRequest			true	" "
//	@Router			/revoke [post]
func (c *Client) Revoke(ctx context.Context, req *RevokeRequest) (*RevokeReply, error) {
	optInsecure := grpc.WithTransportCredentials(insecure.NewCredentials())

	conn, err := grpc.NewClient(c.cfg.Registry.GRPCServer.Addr, optInsecure)
	if err != nil {
		return nil, err
	}
	defer conn.Close()

	client := apiv1_registry.NewRegistryServiceClient(conn)
	resp, err := client.Revoke(ctx, &apiv1_registry.RevokeRequest{
		Entity: "mura",
	})
	if err != nil {
		return nil, err
	}

	reply := &RevokeReply{
		Data: struct {
			Status bool `json:"status"`
		}{
			Status: resp.Status,
		},
	}
	return reply, nil
}
