package statusissuer

import (
	"fmt"
	"os"
	"testing"
	"vc/internal/verifier/db"
	"vc/pkg/logger"
	"vc/pkg/model"
	"vc/pkg/trace"

	"github.com/stretchr/testify/assert"
)

func mockService(t *testing.T) *Service {
	ctx := t.Context()

	cfg := &model.Cfg{}

	logger := logger.NewSimple("testing")

	tracing, err := trace.NewForTesting(ctx, "verifier", logger)
	assert.NoError(t, err)

	dbService, err := db.New(ctx, cfg, tracing, logger)
	assert.NoError(t, err)

	s, err := New(ctx, dbService, logger)
	assert.NoError(t, err)

	return s
}

func TestAppend(t *testing.T) {
	tts := []struct {
		name           string
		statuses       []uint8
		binaryFilePath string
	}{
		{
			name:           "write status issuer file",
			statuses:       []uint8{1},
			binaryFilePath: "./testdata/status_list_1.bin",
		},
		{
			name:           "write status issuer file",
			statuses:       []uint8{1, 2},
			binaryFilePath: "./testdata/status_list_2.bin",
		},
		{
			name:           "write status issuer file",
			statuses:       []uint8{1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3},
			binaryFilePath: "./testdata/status_list_3.bin",
		},
	}

	for _, tt := range tts {
		t.Run(tt.name, func(t *testing.T) {
			ctx := t.Context()

			s := mockService(t)
			tmpfile, err := os.Create(tt.binaryFilePath)
			if err != nil {
				t.Fatalf("failed to create temp file: %v", err)
			}

			for _, status := range tt.statuses {
				err = s.Append(ctx, tmpfile, status)
				assert.NoError(t, err)
			}

			err = s.Read(tt.binaryFilePath)
			assert.NoError(t, err)

		})
	}
}

func TestCompressAndEncode(t *testing.T) {
	ctx := t.Context()

	s := mockService(t)

	statuses := []uint8{1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2, 3, 1, 2, 3, 2, 1, 1, 1, 2}
	got, err := s.CompressAndEncode(ctx, statuses)
	assert.NoError(t, err)

	fmt.Println("got", got)
}

func TestRead(t *testing.T) {
	tts := []struct {
		name           string
		binaryFilePath string
	}{
		{
			name:           "read status issuer file",
			binaryFilePath: "./testdata/status_list_1.bin",
		},
		{
			name:           "read status issuer file",
			binaryFilePath: "./testdata/status_list_2.bin",
		},
		{
			name:           "read status issuer file",
			binaryFilePath: "./testdata/status_list_3.bin",
		},
	}

	for _, tt := range tts {
		t.Run(tt.name, func(t *testing.T) {

			s := mockService(t)

			err := s.Read(tt.binaryFilePath)
			assert.NoError(t, err)

		})
	}
}

func TestWriteV2(t *testing.T) {
	ctx := t.Context()

	s := mockService(t)

	tmpfile, err := os.Create("./testdata/status_list_v2.bin")
	if err != nil {
		t.Fatalf("failed to create temp file: %v", err)
	}

	status := StatusSuspended
	err = s.Append(ctx, tmpfile, status)
	assert.NoError(t, err)
}

func TestReadAt(t *testing.T) {
	tts := []struct {
		name           string
		binaryFilePath string
		index          int64
		expectedStatus uint8
	}{
		{
			name:           "read status issuer file at index 0",
			binaryFilePath: "./testdata/status_list_3.bin",
			index:          0,
			expectedStatus: 1,
		},
		{
			name:           "read status issuer file at index 3",
			binaryFilePath: "./testdata/status_list_3.bin",
			index:          3,
			expectedStatus: 2,
		},
		{
			name:           "read status issuer file at index 6",
			binaryFilePath: "./testdata/status_list_3.bin",
			index:          6,
			expectedStatus: 1,
		},
		{
			name:           "read status issuer file at index 8",
			binaryFilePath: "./testdata/status_list_3.bin",
			index:          8,
			expectedStatus: 3,
		},
	}

	for _, tt := range tts {
		t.Run(tt.name, func(t *testing.T) {
			ctx := t.Context()

			s := mockService(t)

			file, err := os.Open(tt.binaryFilePath)
			assert.NoError(t, err)
			defer file.Close()

			status, err := s.ReadAt(ctx, file, tt.index)
			assert.NoError(t, err)
			assert.Equal(t, tt.expectedStatus, status)

		})
	}
}
